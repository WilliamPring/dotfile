import { z } from "zod";
declare const schemaCurrencyListParams: z.ZodOptional<z.ZodObject<{
    currencyIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    currencyIds?: string[] | undefined;
}, {
    currencyIds?: string[] | undefined;
}>>;
declare const schemaCurrencyListResult: z.ZodObject<{
    currencies: z.ZodArray<z.ZodDiscriminatedUnion<"type", z.Primitive, z.ZodObject<z.extendShape<{
        color: z.ZodString;
        ticker: z.ZodString;
        id: z.ZodString;
        name: z.ZodString;
        decimals: z.ZodNumber;
    }, {
        type: z.ZodLiteral<"CryptoCurrency">;
        family: z.ZodEnum<["bitcoin", "ethereum", "algorand", "crypto_org", "ripple", "cosmos", "ripple", "cosmos", "tezos", "polkadot", "stellar", "tron"]>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        type: "CryptoCurrency";
        color: string;
        ticker: string;
        decimals: number;
        family: "bitcoin" | "ethereum" | "algorand" | "crypto_org" | "ripple" | "cosmos" | "tezos" | "polkadot" | "stellar" | "tron";
    }, {
        id: string;
        name: string;
        type: "CryptoCurrency";
        color: string;
        ticker: string;
        decimals: number;
        family: "bitcoin" | "ethereum" | "algorand" | "crypto_org" | "ripple" | "cosmos" | "tezos" | "polkadot" | "stellar" | "tron";
    }> | z.ZodObject<z.extendShape<z.extendShape<{
        color: z.ZodString;
        ticker: z.ZodString;
        id: z.ZodString;
        name: z.ZodString;
        decimals: z.ZodNumber;
    }, {
        type: z.ZodLiteral<"TokenCurrency">;
        parent: z.ZodString;
    }>, {
        standard: z.ZodEnum<["ERC20"]>;
        contract: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        type: "TokenCurrency";
        color: string;
        ticker: string;
        decimals: number;
        parent: string;
        standard: "ERC20";
        contract: string;
    }, {
        id: string;
        name: string;
        type: "TokenCurrency";
        color: string;
        ticker: string;
        decimals: number;
        parent: string;
        standard: "ERC20";
        contract: string;
    }>>, "many">;
}, "strip", z.ZodTypeAny, {
    currencies: ({
        id: string;
        name: string;
        type: "CryptoCurrency";
        color: string;
        ticker: string;
        decimals: number;
        family: "bitcoin" | "ethereum" | "algorand" | "crypto_org" | "ripple" | "cosmos" | "tezos" | "polkadot" | "stellar" | "tron";
    } | {
        id: string;
        name: string;
        type: "TokenCurrency";
        color: string;
        ticker: string;
        decimals: number;
        parent: string;
        standard: "ERC20";
        contract: string;
    })[];
}, {
    currencies: ({
        id: string;
        name: string;
        type: "CryptoCurrency";
        color: string;
        ticker: string;
        decimals: number;
        family: "bitcoin" | "ethereum" | "algorand" | "crypto_org" | "ripple" | "cosmos" | "tezos" | "polkadot" | "stellar" | "tron";
    } | {
        id: string;
        name: string;
        type: "TokenCurrency";
        color: string;
        ticker: string;
        decimals: number;
        parent: string;
        standard: "ERC20";
        contract: string;
    })[];
}>;
export declare const schemaCurrencyList: {
    params: z.ZodOptional<z.ZodObject<{
        currencyIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        currencyIds?: string[] | undefined;
    }, {
        currencyIds?: string[] | undefined;
    }>>;
    result: z.ZodObject<{
        currencies: z.ZodArray<z.ZodDiscriminatedUnion<"type", z.Primitive, z.ZodObject<z.extendShape<{
            color: z.ZodString;
            ticker: z.ZodString;
            id: z.ZodString;
            name: z.ZodString;
            decimals: z.ZodNumber;
        }, {
            type: z.ZodLiteral<"CryptoCurrency">;
            family: z.ZodEnum<["bitcoin", "ethereum", "algorand", "crypto_org", "ripple", "cosmos", "ripple", "cosmos", "tezos", "polkadot", "stellar", "tron"]>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            type: "CryptoCurrency";
            color: string;
            ticker: string;
            decimals: number;
            family: "bitcoin" | "ethereum" | "algorand" | "crypto_org" | "ripple" | "cosmos" | "tezos" | "polkadot" | "stellar" | "tron";
        }, {
            id: string;
            name: string;
            type: "CryptoCurrency";
            color: string;
            ticker: string;
            decimals: number;
            family: "bitcoin" | "ethereum" | "algorand" | "crypto_org" | "ripple" | "cosmos" | "tezos" | "polkadot" | "stellar" | "tron";
        }> | z.ZodObject<z.extendShape<z.extendShape<{
            color: z.ZodString;
            ticker: z.ZodString;
            id: z.ZodString;
            name: z.ZodString;
            decimals: z.ZodNumber;
        }, {
            type: z.ZodLiteral<"TokenCurrency">;
            parent: z.ZodString;
        }>, {
            standard: z.ZodEnum<["ERC20"]>;
            contract: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            type: "TokenCurrency";
            color: string;
            ticker: string;
            decimals: number;
            parent: string;
            standard: "ERC20";
            contract: string;
        }, {
            id: string;
            name: string;
            type: "TokenCurrency";
            color: string;
            ticker: string;
            decimals: number;
            parent: string;
            standard: "ERC20";
            contract: string;
        }>>, "many">;
    }, "strip", z.ZodTypeAny, {
        currencies: ({
            id: string;
            name: string;
            type: "CryptoCurrency";
            color: string;
            ticker: string;
            decimals: number;
            family: "bitcoin" | "ethereum" | "algorand" | "crypto_org" | "ripple" | "cosmos" | "tezos" | "polkadot" | "stellar" | "tron";
        } | {
            id: string;
            name: string;
            type: "TokenCurrency";
            color: string;
            ticker: string;
            decimals: number;
            parent: string;
            standard: "ERC20";
            contract: string;
        })[];
    }, {
        currencies: ({
            id: string;
            name: string;
            type: "CryptoCurrency";
            color: string;
            ticker: string;
            decimals: number;
            family: "bitcoin" | "ethereum" | "algorand" | "crypto_org" | "ripple" | "cosmos" | "tezos" | "polkadot" | "stellar" | "tron";
        } | {
            id: string;
            name: string;
            type: "TokenCurrency";
            color: string;
            ticker: string;
            decimals: number;
            parent: string;
            standard: "ERC20";
            contract: string;
        })[];
    }>;
};
export declare type CurrencyList = {
    params: z.infer<typeof schemaCurrencyListParams>;
    result: z.infer<typeof schemaCurrencyListResult>;
};
export declare type CurrencyListHandler = (params: CurrencyList["params"]) => CurrencyList["result"];
export {};
//# sourceMappingURL=CurrencyList.d.ts.map