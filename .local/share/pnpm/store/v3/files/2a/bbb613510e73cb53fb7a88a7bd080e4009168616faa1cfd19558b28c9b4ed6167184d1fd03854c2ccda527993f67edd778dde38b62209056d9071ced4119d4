"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeTotalCollateral = exports.serializeRequiredSigner = exports.serializeMintBasicParams = exports.serializeToken = exports.serializeAssetGroup = exports.serializeTxWitnessRequest = exports.serializeTxValidityStart = exports.serializeTxTtl = exports.serializeTxFee = exports.serializeTxWithdrawal = exports.serializeTxInput = void 0;
const invalidDataReason_1 = require("../../errors/invalidDataReason");
const assert_1 = require("../../utils/assert");
const serialize_1 = require("../../utils/serialize");
const getVersion_1 = require("../getVersion");
function serializeTxInput(input) {
    return Buffer.concat([
        serialize_1.hex_to_buf(input.txHashHex),
        serialize_1.uint32_to_buf(input.outputIndex),
    ]);
}
exports.serializeTxInput = serializeTxInput;
function serializeTxWithdrawal(withdrawal, version) {
    if (getVersion_1.getCompatibility(version).supportsMultisigTransaction) {
        return Buffer.concat([
            serialize_1.uint64_to_buf(withdrawal.amount),
            serialize_1.stake_credential_to_buf(withdrawal.stakeCredential),
        ]);
    }
    else {
        assert_1.assert(withdrawal.stakeCredential.type === 0, invalidDataReason_1.InvalidDataReason.WITHDRAWAL_INVALID_STAKE_CREDENTIAL);
        return Buffer.concat([
            serialize_1.uint64_to_buf(withdrawal.amount),
            serialize_1.path_to_buf(withdrawal.stakeCredential.path),
        ]);
    }
}
exports.serializeTxWithdrawal = serializeTxWithdrawal;
function serializeTxFee(fee) {
    return Buffer.concat([
        serialize_1.uint64_to_buf(fee),
    ]);
}
exports.serializeTxFee = serializeTxFee;
function serializeTxTtl(ttl) {
    return Buffer.concat([
        serialize_1.uint64_to_buf(ttl),
    ]);
}
exports.serializeTxTtl = serializeTxTtl;
function serializeTxValidityStart(validityIntervalStart) {
    return Buffer.concat([
        serialize_1.uint64_to_buf(validityIntervalStart),
    ]);
}
exports.serializeTxValidityStart = serializeTxValidityStart;
function serializeTxWitnessRequest(path) {
    return Buffer.concat([
        serialize_1.path_to_buf(path),
    ]);
}
exports.serializeTxWitnessRequest = serializeTxWitnessRequest;
function serializeAssetGroup(assetGroup) {
    return Buffer.concat([
        serialize_1.hex_to_buf(assetGroup.policyIdHex),
        serialize_1.uint32_to_buf(assetGroup.tokens.length),
    ]);
}
exports.serializeAssetGroup = serializeAssetGroup;
function serializeToken(token, serializeTokenAmountFn) {
    return Buffer.concat([
        serialize_1.uint32_to_buf(token.assetNameHex.length / 2),
        serialize_1.hex_to_buf(token.assetNameHex),
        serializeTokenAmountFn(token.amount),
    ]);
}
exports.serializeToken = serializeToken;
function serializeMintBasicParams(mint) {
    return Buffer.concat([
        serialize_1.uint32_to_buf(mint.length),
    ]);
}
exports.serializeMintBasicParams = serializeMintBasicParams;
function serializeRequiredSigner(requiredSigner) {
    switch (requiredSigner.type) {
        case 0:
            return Buffer.concat([
                serialize_1.uint8_to_buf(requiredSigner.type),
                serialize_1.path_to_buf(requiredSigner.path),
            ]);
        case 1:
            return Buffer.concat([
                serialize_1.uint8_to_buf(requiredSigner.type),
                serialize_1.hex_to_buf(requiredSigner.hashHex),
            ]);
    }
}
exports.serializeRequiredSigner = serializeRequiredSigner;
function serializeTotalCollateral(totalCollateral) {
    return Buffer.concat([
        serialize_1.uint64_to_buf(totalCollateral),
    ]);
}
exports.serializeTotalCollateral = serializeTotalCollateral;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHhPdGhlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pbnRlcmFjdGlvbnMvc2VyaWFsaXphdGlvbi90eE90aGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNFQUFrRTtBQUlsRSwrQ0FBMkM7QUFDM0MscURBQW9JO0FBQ3BJLDhDQUFnRDtBQUdoRCxTQUFnQixnQkFBZ0IsQ0FDNUIsS0FBa0I7SUFFbEIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2pCLHNCQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUMzQix5QkFBYSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7S0FDbkMsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQVBELDRDQU9DO0FBRUQsU0FBZ0IscUJBQXFCLENBQ2pDLFVBQTRCLEVBQzVCLE9BQWdCO0lBRWhCLElBQUksNkJBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsMkJBQTJCLEVBQUU7UUFDdkQsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ2pCLHlCQUFhLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztZQUNoQyxtQ0FBdUIsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDO1NBQ3RELENBQUMsQ0FBQTtLQUNMO1NBQU07UUFFSCxlQUFNLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxJQUFJLE1BQWlDLEVBQUUscUNBQWlCLENBQUMsbUNBQW1DLENBQUMsQ0FBQTtRQUMvSCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDakIseUJBQWEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1lBQ2hDLHVCQUFXLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7U0FDL0MsQ0FBQyxDQUFBO0tBQ0w7QUFDTCxDQUFDO0FBakJELHNEQWlCQztBQUVELFNBQWdCLGNBQWMsQ0FDMUIsR0FBZTtJQUVmLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNqQix5QkFBYSxDQUFDLEdBQUcsQ0FBQztLQUNyQixDQUFDLENBQUE7QUFDTixDQUFDO0FBTkQsd0NBTUM7QUFFRCxTQUFnQixjQUFjLENBQzFCLEdBQWU7SUFFZixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDakIseUJBQWEsQ0FBQyxHQUFHLENBQUM7S0FDckIsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQU5ELHdDQU1DO0FBRUQsU0FBZ0Isd0JBQXdCLENBQ3BDLHFCQUFpQztJQUVqQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDakIseUJBQWEsQ0FBQyxxQkFBcUIsQ0FBQztLQUN2QyxDQUFDLENBQUE7QUFDTixDQUFDO0FBTkQsNERBTUM7QUFFRCxTQUFnQix5QkFBeUIsQ0FDckMsSUFBb0I7SUFFcEIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2pCLHVCQUFXLENBQUMsSUFBSSxDQUFDO0tBQ3BCLENBQUMsQ0FBQTtBQUNOLENBQUM7QUFORCw4REFNQztBQUVELFNBQWdCLG1CQUFtQixDQUFJLFVBQStCO0lBQ2xFLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNqQixzQkFBVSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUM7UUFDbEMseUJBQWEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQWtCLENBQUM7S0FDdEQsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQUxELGtEQUtDO0FBRUQsU0FBZ0IsY0FBYyxDQUFJLEtBQXFCLEVBQUUsc0JBQWlEO0lBQ3RHLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNqQix5QkFBYSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQWEsQ0FBQztRQUN4RCxzQkFBVSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUM7UUFDOUIsc0JBQXNCLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztLQUN2QyxDQUFDLENBQUE7QUFDTixDQUFDO0FBTkQsd0NBTUM7QUFFRCxTQUFnQix3QkFBd0IsQ0FBQyxJQUF3QztJQUM3RSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDakIseUJBQWEsQ0FBQyxJQUFJLENBQUMsTUFBa0IsQ0FBQztLQUN6QyxDQUFDLENBQUE7QUFDTixDQUFDO0FBSkQsNERBSUM7QUFFRCxTQUFnQix1QkFBdUIsQ0FBQyxjQUFvQztJQUN4RSxRQUFRLGNBQWMsQ0FBQyxJQUFJLEVBQUU7UUFDN0I7WUFDSSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQ2pCLHdCQUFZLENBQUMsY0FBYyxDQUFDLElBQWUsQ0FBQztnQkFDNUMsdUJBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO2FBQ25DLENBQUMsQ0FBQTtRQUNOO1lBQ0ksT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO2dCQUNqQix3QkFBWSxDQUFDLGNBQWMsQ0FBQyxJQUFlLENBQUM7Z0JBQzVDLHNCQUFVLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQzthQUNyQyxDQUFDLENBQUE7S0FDTDtBQUNMLENBQUM7QUFiRCwwREFhQztBQUVELFNBQWdCLHdCQUF3QixDQUNwQyxlQUEyQjtJQUUzQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDakIseUJBQWEsQ0FBQyxlQUFlLENBQUM7S0FDakMsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQU5ELDREQU1DIn0=