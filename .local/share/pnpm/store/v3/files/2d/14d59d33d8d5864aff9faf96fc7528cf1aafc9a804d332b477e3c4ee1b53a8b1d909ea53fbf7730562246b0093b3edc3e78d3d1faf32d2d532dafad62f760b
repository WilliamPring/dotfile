import { Tendermint34Client } from "@cosmjs/tendermint-rpc";
import { Account } from "./accounts";
import { MsgData } from "./codec/cosmos/base/abci/v1beta1/abci";
import { Coin } from "./codec/cosmos/base/v1beta1/coin";
import { AuthExtension, BankExtension, QueryClient } from "./queries";
import { SearchTxFilter, SearchTxQuery } from "./search";
/**
 * This is the same as BlockHeader from @cosmjs/launchpad but those might diverge in the future.
 */
export interface BlockHeader {
    readonly version: {
        readonly block: string;
        readonly app: string;
    };
    readonly height: number;
    readonly chainId: string;
    /** An RFC 3339 time string like e.g. '2020-02-15T10:39:10.4696305Z' */
    readonly time: string;
}
/**
 * This is the same as Block from @cosmjs/launchpad but those might diverge in the future.
 */
export interface Block {
    /** The ID is a hash of the block header (uppercase hex) */
    readonly id: string;
    readonly header: BlockHeader;
    /** Array of raw transactions */
    readonly txs: readonly Uint8Array[];
}
/** A transaction that is indexed as part of the transaction history */
export interface IndexedTx {
    readonly height: number;
    /** Transaction hash (might be used as transaction ID). Guaranteed to be non-empty upper-case hex */
    readonly hash: string;
    /** Transaction execution error code. 0 on success. */
    readonly code: number;
    readonly rawLog: string;
    readonly tx: Uint8Array;
}
export interface SequenceResponse {
    readonly accountNumber: number;
    readonly sequence: number;
}
export interface BroadcastTxFailure {
    readonly height: number;
    readonly code: number;
    readonly transactionHash: string;
    readonly rawLog?: string;
    readonly data?: readonly MsgData[];
}
export interface BroadcastTxSuccess {
    readonly height: number;
    readonly transactionHash: string;
    readonly rawLog?: string;
    readonly data?: readonly MsgData[];
}
export declare type BroadcastTxResponse = BroadcastTxSuccess | BroadcastTxFailure;
export declare function isBroadcastTxFailure(result: BroadcastTxResponse): result is BroadcastTxFailure;
export declare function isBroadcastTxSuccess(result: BroadcastTxResponse): result is BroadcastTxSuccess;
/**
 * Ensures the given result is a success. Throws a detailed error message otherwise.
 */
export declare function assertIsBroadcastTxSuccess(result: BroadcastTxResponse): asserts result is BroadcastTxSuccess;
/** Use for testing only */
export interface PrivateStargateClient {
    readonly tmClient: Tendermint34Client | undefined;
}
export declare class StargateClient {
    private readonly tmClient;
    private readonly queryClient;
    private chainId;
    static connect(endpoint: string): Promise<StargateClient>;
    protected constructor(tmClient: Tendermint34Client | undefined);
    protected getTmClient(): Tendermint34Client | undefined;
    protected forceGetTmClient(): Tendermint34Client;
    protected getQueryClient(): (QueryClient & AuthExtension & BankExtension) | undefined;
    protected forceGetQueryClient(): QueryClient & AuthExtension & BankExtension;
    getChainId(): Promise<string>;
    getHeight(): Promise<number>;
    getAccount(searchAddress: string): Promise<Account | null>;
    getAccountVerified(searchAddress: string): Promise<Account | null>;
    getSequence(address: string): Promise<SequenceResponse>;
    getBlock(height?: number): Promise<Block>;
    getBalance(address: string, searchDenom: string): Promise<Coin>;
    /**
     * Queries all balances for all denoms that belong to this address.
     *
     * Uses the grpc queries (which iterates over the store internally), and we cannot get
     * proofs from such a method.
     */
    getAllBalances(address: string): Promise<readonly Coin[]>;
    getTx(id: string): Promise<IndexedTx | null>;
    searchTx(query: SearchTxQuery, filter?: SearchTxFilter): Promise<readonly IndexedTx[]>;
    disconnect(): void;
    broadcastTx(tx: Uint8Array): Promise<BroadcastTxResponse>;
    private txsQuery;
}
