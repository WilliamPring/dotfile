"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* istanbul ignore file */
const mocks_json_1 = __importDefault(require("./mocks.json"));
const generateRandomTxID_1 = __importDefault(require("./generateRandomTxID"));
const serializers_1 = require("../serializers");
const { rawAccounts, rawCurrencies } = mocks_json_1.default;
const accounts = rawAccounts.map(serializers_1.deserializeAccount);
const currencies = rawCurrencies;
class LedgerLiveSDKMock {
    constructor() {
        this.connected = false;
    }
    connect() {
        this.connected = true;
    }
    disconnect() {
        this.connected = false;
    }
    /** Legder Live Methods */
    requestAccount() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(accounts[0]);
        });
    }
    listCurrencies() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.connected) {
                throw new Error("Ledger Live API not connected");
            }
            return Promise.resolve(currencies);
        });
    }
    listAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.connected) {
                throw new Error("Ledger Live API not connected");
            }
            return Promise.resolve(accounts);
        });
    }
    getAccount(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.connected) {
                throw new Error("Ledger Live API not connected");
            }
            const selectedAccount = accounts.find(({ id }) => id === accountId);
            if (!selectedAccount) {
                throw new Error("Account not found");
            }
            return Promise.resolve(selectedAccount);
        });
    }
    receive(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.connected) {
                throw new Error("Ledger Live API not connected");
            }
            const selectedAccount = accounts.find(({ id }) => id === accountId);
            if (!selectedAccount) {
                throw new Error("Account not found");
            }
            return Promise.resolve(selectedAccount.address);
        });
    }
    signTransaction(_accountId, _transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.connected) {
                throw new Error("Ledger Live API not connected");
            }
            return Promise.resolve({
                operation: {},
                signature: (0, generateRandomTxID_1.default)(109),
                expirationDate: null,
            });
        });
    }
    // eslint-disable-next-line class-methods-use-this
    signMessage(_accountId, _message) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve("message signed!");
        });
    }
    broadcastSignedTransaction(_accountId, _signedTransaction) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.connected) {
                throw new Error("Ledger Live API not connected");
            }
            return Promise.resolve((0, generateRandomTxID_1.default)(64));
        });
    }
}
exports.default = LedgerLiveSDKMock;
