'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var dom = require('@floating-ui/dom');
var react = require('react');

var index = typeof document !== 'undefined' ? react.useLayoutEffect : react.useEffect;

// Fork of `fast-deep-equal` that only does the comparisons we need and compares
// functions
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }

  if (typeof a !== typeof b) {
    return false;
  }

  if (typeof a === 'function' && a.toString() === b.toString()) {
    return true;
  }

  let length, i, keys;

  if (a && b && typeof a == 'object') {
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;

      for (i = length; i-- !== 0;) {
        if (!deepEqual(a[i], b[i])) {
          return false;
        }
      }

      return true;
    }

    keys = Object.keys(a);
    length = keys.length;

    if (length !== Object.keys(b).length) {
      return false;
    }

    for (i = length; i-- !== 0;) {
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {
        return false;
      }
    }

    for (i = length; i-- !== 0;) {
      const key = keys[i];

      if (key === '_owner' && a.$$typeof) {
        continue;
      }

      if (!deepEqual(a[key], b[key])) {
        return false;
      }
    }

    return true;
  }

  return a !== a && b !== b;
}

function useFloating(_temp) {
  let {
    middleware,
    placement,
    strategy
  } = _temp === void 0 ? {} : _temp;
  const reference = react.useRef(null);
  const floating = react.useRef(null);
  const [data, setData] = react.useState({
    // Setting these to `null` will allow the consumer to determine if
    // `computePosition()` has run yet
    x: null,
    y: null,
    strategy: strategy != null ? strategy : 'absolute',
    placement: 'bottom',
    middlewareData: {}
  });
  const [latestMiddleware, setLatestMiddleware] = react.useState(middleware);

  if (!deepEqual(latestMiddleware == null ? void 0 : latestMiddleware.map(_ref => {
    let {
      options
    } = _ref;
    return options;
  }), middleware == null ? void 0 : middleware.map(_ref2 => {
    let {
      options
    } = _ref2;
    return options;
  }))) {
    setLatestMiddleware(middleware);
  }

  const isMountedRef = react.useRef(true);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  const update = react.useCallback(() => {
    if (!reference.current || !floating.current) {
      return;
    }

    dom.computePosition(reference.current, floating.current, {
      middleware: latestMiddleware,
      placement,
      strategy
    }).then(data => {
      if (isMountedRef.current) {
        setData(data);
      }
    });
  }, [latestMiddleware, placement, strategy]);
  index(update, [update]);
  const setReference = react.useCallback(node => {
    reference.current = node;
    update();
  }, [update]);
  const setFloating = react.useCallback(node => {
    floating.current = node;
    update();
  }, [update]);
  return react.useMemo(() => ({ ...data,
    update,
    reference: setReference,
    floating: setFloating,
    refs: {
      reference,
      floating
    }
  }), [data, update, setReference, setFloating]);
}
const arrow = options => {
  const {
    element,
    padding
  } = options;

  function isRef(value) {
    return Object.prototype.hasOwnProperty.call(value, 'current');
  }

  return {
    name: 'arrow',
    options,

    fn(args) {
      if (isRef(element)) {
        if (element.current != null) {
          return dom.arrow({
            element: element.current,
            padding
          }).fn(args);
        }

        return {};
      } else if (element) {
        return dom.arrow({
          element,
          padding
        }).fn(args);
      }

      return {};
    }

  };
};

Object.defineProperty(exports, 'autoPlacement', {
  enumerable: true,
  get: function () { return dom.autoPlacement; }
});
Object.defineProperty(exports, 'detectOverflow', {
  enumerable: true,
  get: function () { return dom.detectOverflow; }
});
Object.defineProperty(exports, 'flip', {
  enumerable: true,
  get: function () { return dom.flip; }
});
Object.defineProperty(exports, 'getScrollParents', {
  enumerable: true,
  get: function () { return dom.getScrollParents; }
});
Object.defineProperty(exports, 'hide', {
  enumerable: true,
  get: function () { return dom.hide; }
});
Object.defineProperty(exports, 'inline', {
  enumerable: true,
  get: function () { return dom.inline; }
});
Object.defineProperty(exports, 'limitShift', {
  enumerable: true,
  get: function () { return dom.limitShift; }
});
Object.defineProperty(exports, 'offset', {
  enumerable: true,
  get: function () { return dom.offset; }
});
Object.defineProperty(exports, 'shift', {
  enumerable: true,
  get: function () { return dom.shift; }
});
Object.defineProperty(exports, 'size', {
  enumerable: true,
  get: function () { return dom.size; }
});
exports.arrow = arrow;
exports.useFloating = useFloating;
