"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeOptionFlag = exports.stake_credential_to_buf = exports.path_to_buf = exports.buf_to_hex = exports.hex_to_buf = exports.int64_to_buf = exports.uint64_to_buf = exports.buf_to_uint32 = exports.uint32_to_buf = exports.buf_to_uint16 = exports.uint16_to_buf = exports.uint8_to_buf = void 0;
const int64_buffer_1 = require("int64-buffer");
const assert_1 = require("./assert");
const parse_1 = require("./parse");
function uint8_to_buf(value) {
    assert_1.assert(parse_1.isUint8(value), 'invalid uint8');
    const data = Buffer.alloc(1);
    data.writeUInt8(value, 0);
    return data;
}
exports.uint8_to_buf = uint8_to_buf;
function uint16_to_buf(value) {
    assert_1.assert(parse_1.isUint16(value), 'invalid uint16');
    const data = Buffer.alloc(2);
    data.writeUInt16BE(value, 0);
    return data;
}
exports.uint16_to_buf = uint16_to_buf;
function buf_to_uint16(data) {
    assert_1.assert(data.length === 2, "invalid uint16 buffer");
    return data.readUIntBE(0, 2);
}
exports.buf_to_uint16 = buf_to_uint16;
function uint32_to_buf(value) {
    assert_1.assert(parse_1.isUint32(value), 'invalid uint32');
    const data = Buffer.alloc(4);
    data.writeUInt32BE(value, 0);
    return data;
}
exports.uint32_to_buf = uint32_to_buf;
function buf_to_uint32(data) {
    assert_1.assert(data.length === 4, "invalid uint32 buffer");
    return data.readUIntBE(0, 4);
}
exports.buf_to_uint32 = buf_to_uint32;
function uint64_to_buf(value) {
    assert_1.assert(parse_1.isUint64str(value), 'invalid uint64_str');
    const data = new int64_buffer_1.Uint64BE(value, 10).toBuffer();
    assert_1.assert(data.length === 8, "invalid data length");
    return data;
}
exports.uint64_to_buf = uint64_to_buf;
function int64_to_buf(value) {
    assert_1.assert(parse_1.isInt64str(value), 'invalid int64_str');
    const data = new int64_buffer_1.Int64BE(value, 10).toBuffer();
    assert_1.assert(data.length === 8, "invalid data length");
    return data;
}
exports.int64_to_buf = int64_to_buf;
function hex_to_buf(data) {
    assert_1.assert(parse_1.isHexString(data), "invalid hex string");
    return Buffer.from(data, "hex");
}
exports.hex_to_buf = hex_to_buf;
function buf_to_hex(data) {
    return data.toString("hex");
}
exports.buf_to_hex = buf_to_hex;
function path_to_buf(path) {
    assert_1.assert(parse_1.isValidPath(path), "invalid bip32 path");
    const data = Buffer.alloc(1 + 4 * path.length);
    data.writeUInt8(path.length, 0);
    for (let i = 0; i < path.length; i++) {
        data.writeUInt32BE(path[i], 1 + i * 4);
    }
    return data;
}
exports.path_to_buf = path_to_buf;
function stake_credential_to_buf(stakeCredential) {
    switch (stakeCredential.type) {
        case 0:
            return Buffer.concat([
                uint8_to_buf(stakeCredential.type),
                path_to_buf(stakeCredential.path),
            ]);
        case 2:
            return Buffer.concat([
                uint8_to_buf(stakeCredential.type),
                hex_to_buf(stakeCredential.keyHashHex),
            ]);
        case 1:
            return Buffer.concat([
                uint8_to_buf(stakeCredential.type),
                hex_to_buf(stakeCredential.scriptHashHex),
            ]);
    }
}
exports.stake_credential_to_buf = stake_credential_to_buf;
function serializeOptionFlag(included) {
    const SignTxIncluded = {
        NO: 1,
        YES: 2,
    };
    const value = included
        ? SignTxIncluded.YES
        : SignTxIncluded.NO;
    return uint8_to_buf(value);
}
exports.serializeOptionFlag = serializeOptionFlag;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3NlcmlhbGl6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBZ0Q7QUFJaEQscUNBQWlDO0FBQ2pDLG1DQUF3RztBQUV4RyxTQUFnQixZQUFZLENBQUMsS0FBYztJQUN2QyxlQUFNLENBQUMsZUFBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFBO0lBQ3ZDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDekIsT0FBTyxJQUFJLENBQUE7QUFDZixDQUFDO0FBTEQsb0NBS0M7QUFFRCxTQUFnQixhQUFhLENBQUMsS0FBeUI7SUFDbkQsZUFBTSxDQUFDLGdCQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQTtJQUV6QyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzVCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzVCLE9BQU8sSUFBSSxDQUFBO0FBQ2YsQ0FBQztBQU5ELHNDQU1DO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLElBQVk7SUFDdEMsZUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLHVCQUF1QixDQUFDLENBQUE7SUFFbEQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQWEsQ0FBQTtBQUM1QyxDQUFDO0FBSkQsc0NBSUM7QUFFRCxTQUFnQixhQUFhLENBQUMsS0FBb0M7SUFDOUQsZUFBTSxDQUFDLGdCQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQTtJQUV6QyxNQUFNLElBQUksR0FBRyxN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