"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidDataReason = void 0;
var InvalidDataReason;
(function (InvalidDataReason) {
    InvalidDataReason["GET_EXT_PUB_KEY_PATHS_NOT_ARRAY"] = "ext pub key paths not an array";
    InvalidDataReason["INVALID_PATH"] = "invalid path";
    InvalidDataReason["NETWORK_INVALID_PROTOCOL_MAGIC"] = "invalid protocol magic";
    InvalidDataReason["NETWORK_INVALID_NETWORK_ID"] = "invalid network id";
    InvalidDataReason["NETWORK_ID_INCLUDE_INVALID"] = "invalid value for includeNetworkId";
    InvalidDataReason["INPUTS_NOT_ARRAY"] = "inputs not an array";
    InvalidDataReason["INPUT_INVALID_TX_HASH"] = "invalid tx hash in an input";
    InvalidDataReason["INPUT_INVALID_PATH"] = "invalid input path";
    InvalidDataReason["INPUT_INVALID_UTXO_INDEX"] = "invalid input utxo index";
    InvalidDataReason["OUTPUTS_NOT_ARRAY"] = "outputs not an array";
    InvalidDataReason["OUTPUT_INVALID_FORMAT"] = "invalid output format";
    InvalidDataReason["OUTPUT_INVALID_AMOUNT"] = "invalid amount in an output";
    InvalidDataReason["OUTPUT_INVALID_ADDRESS"] = "invalid address in an output";
    InvalidDataReason["OUTPUT_INVALID_ADDRESS_PARAMS"] = "change address must have path as payment part";
    InvalidDataReason["OUTPUT_INVALID_DATUM_HASH"] = "invalid datum hash";
    InvalidDataReason["OUTPUT_INVALID_INLINE_DATUM"] = "invalid inline datum";
    InvalidDataReason["OUTPUT_INVALID_REFERENCE_SCRIPT_HEX"] = "invalid script hex";
    InvalidDataReason["OUTPUT_INCONSISTENT_DATUM"] = "datum is not consistent with output type";
    InvalidDataReason["OUTPUT_INCONSISTENT_REFERENCE_SCRIPT"] = "reference script is not consistent with output type";
    InvalidDataReason["MULTIASSET_INVALID_POLICY_NAME"] = "invalid policy id in a multiasset token bundle";
    InvalidDataReason["MULTIASSET_INVALID_TOKEN_BUNDLE_NOT_ARRAY"] = "invalid multiasset token bundle - asset groups not an array";
    InvalidDataReason["MULTIASSET_INVALID_TOKEN_BUNDLE_TOO_LARGE"] = "invalid multiasset token bundle - too many asset groups";
    InvalidDataReason["MULTIASSET_INVALID_TOKEN_BUNDLE_ORDERING"] = "invalid multiasset token bundle - incorrect ordering of asset groups";
    InvalidDataReason["MULTIASSET_INVALID_TOKEN_BUNDLE_NOT_UNIQUE"] = "invalid multiasset token bundle - policyIds not unique";
    InvalidDataReason["MULTIASSET_INVALID_TOKEN_BUNDLE_EMPTY"] = "invalid multiasset token bundle - token bundle is not allowed to be empty";
    InvalidDataReason["MULTIASSET_INVALID_TOKEN_AMOUNT"] = "invalid token amount in an asset group in a multiasset token bundle";
    InvalidDataReason["MULTIASSET_INVALID_ASSET_NAME"] = "invalid asset name in an asset group in a multiasset token bundle";
    InvalidDataReason["MULTIASSET_INVALID_ASSET_GROUP_NOT_ARRAY"] = "invalid asset group in multiasset token bundle - tokens not an array";
    InvalidDataReason["MULTIASSET_INVALID_ASSET_GROUP_TOO_LARGE"] = "invalid asset group in multiasset token bundle - too many tokens";
    InvalidDataReason["MULTIASSET_INVALID_ASSET_GROUP_EMPTY"] = "invalid asset group in multiasset token bundle - zero tokens";
    InvalidDataReason["MULTIASSET_INVALID_ASSET_GROUP_ORDERING"] = "invalid asset group in multiasset token bundle - incorrect ordering of tokens";
    InvalidDataReason["MULTIASSET_INVALID_ASSET_GROUP_NOT_UNIQUE"] = "invalid asset group in multiasset token bundle - token names not unique";
    InvalidDataReason["ADDRESS_UNKNOWN_TYPE"] = "unknown address type";
    InvalidDataReason["ADDRESS_INVALID_SPENDING_INFO"] = "invalid address spending information";
    InvalidDataReason["ADDRESS_INVALID_SPENDING_KEY_PATH"] = "invalid address spending key path";
    InvalidDataReason["ADDRESS_INVALID_SPENDING_SCRIPT_HASH"] = "invalid address spending script hash";
    InvalidDataReason["ADDRESS_INVALID_BLOCKCHAIN_POINTER"] = "invalid address blockchain pointer";
    InvalidDataReason["ADDRESS_INVALID_STAKING_KEY_PATH"] = "invalid address staking key path";
    InvalidDataReason["ADDRESS_INVALID_STAKING_KEY_HASH"] = "invalid address staking key hash";
    InvalidDataReason["ADDRESS_INVALID_STAKING_SCRIPT_HASH"] = "invalid address staking script hash";
    InvalidDataReason["ADDRESS_INVALID_STAKING_INFO"] = "Invalid staking info in an output";
    InvalidDataReason["ADDRESS_INVALID_REWARD_ADDRESS"] = "invalid reward address for this version of ledger";
    InvalidDataReason["FEE_INVALID"] = "invalid fee";
    InvalidDataReason["TTL_INVALID"] = "invalid ttl";
    InvalidDataReason["CERTIFICATES_NOT_ARRAY"] = "certificates not an array";
    InvalidDataReason["CERTIFICATE_INVALID_PATH"] = "one of the certificates contains an invalid path";
    InvalidDataReason["CERTIFICATE_INVALID_SCRIPT_HASH"] = "one of the certificates contains an invalid script hash";
    InvalidDataReason["CERTIFICATE_INVALID_STAKE_CREDENTIAL"] = "one of the certificates contains both a path and a scripthash or neither";
    InvalidDataReason["CERTIFICATE_INVALID_POOL_KEY_HASH"] = "one of the certificates contains an invalid pool key hash";
    InvalidDataReason["CERTIFICATE_SUPERFLUOUS_POOL_KEY_HASH"] = "superfluous pool key hash in a certificate";
    InvalidDataReason["CERTIFICATE_INVALID_TYPE"] = "invalid certificate type";
    InvalidDataReason["POOL_REGISTRATION_INVALID_VRF_KEY_HASH"] = "invalid vrf key hash in a pool registration certificate";
    InvalidDataReason["POOL_REGISTRATION_INVALID_PLEDGE"] = "invalid pledge in a pool registration certificate";
    InvalidDataReason["POOL_REGISTRATION_INVALID_COST"] = "invalid cost in a pool registration certificate";
    InvalidDataReason["POOL_REGISTRATION_INVALID_MARGIN"] = "invalid margin in a pool registration certificate";
    InvalidDataReason["POOL_REGISTRATION_INVALID_MARGIN_DENOMINATOR"] = "pool margin denominator must be a value between 1 and 10^15";
    InvalidDataReason["POOL_REGISTRATION_OWNERS_TOO_MANY"] = "too many owners in a pool registration certificate";
    InvalidDataReason["POOL_KEY_INVALID_TYPE"] = "invalid pool key type";
    InvalidDataReason["POOL_KEY_INVALID_PATH"] = "invalid pool key path in a pool registration certificate";
    InvalidDataReason["POOL_KEY_INVALID_KEY_HASH"] = "invalid pool key hash in a pool registration certificate";
    InvalidDataReason["POOL_OWNER_INVALID_TYPE"] = "invalid owner type";
    InvalidDataReason["POOL_OWNER_INVALID_PATH"] = "invalid owner path in a pool registration certificate";
    InvalidDataReason["POOL_OWNER_INVALID_KEY_HASH"] = "invalid owner key hash in a pool registration certificate";
    InvalidDataReason["POOL_REGISTRATION_RELAYS_TOO_MANY"] = "too many pool relays in a pool registration certificate";
    InvalidDataReason["POOL_REWARD_ACCOUNT_INVALID_TYPE"] = "invalid pool reward account type";
    InvalidDataReason["POOL_REWARD_ACCOUNT_INVALID_PATH"] = "invalid pool reward account key path in a pool registration certificate";
    InvalidDataReason["POOL_REWARD_ACCOUNT_INVALID_HEX"] = "invalid pool reward account hex in a pool registration certificate";
    InvalidDataReason["POOL_RETIREMENT_INVALID_RETIREMENT_EPOCH"] = "invalid pool retirement epoch";
    InvalidDataReason["RELAY_INVALID_TYPE"] = "invalid type of a relay in a pool registration certificate";
    InvalidDataReason["RELAY_INVALID_PORT"] = "invalid port in a relay in a pool registration certificate";
    InvalidDataReason["RELAY_INVALID_IPV4"] = "invalid ipv4 in a relay in a pool registration certificate";
    InvalidDataReason["RELAY_INVALID_IPV6"] = "invalid ipv6 in a relay in a pool registration certificate";
    InvalidDataReason["RELAY_INVALID_DNS"] = "invalid dns record in a relay in a pool registration certificate";
    InvalidDataReason["POOL_REGISTRATION_METADATA_INVALID_URL"] = "invalid metadata in a pool registration certificate= invalid url";
    InvalidDataReason["POOL_REGISTRATION_METADATA_INVALID_HASH"] = "invalid metadata in a pool registration certificate= invalid hash";
    InvalidDataReason["WITHDRAWALS_NOT_ARRAY"] = "withdrawals not an array";
    InvalidDataReason["WITHDRAWAL_INVALID_AMOUNT"] = "invalid withdrawal amount";
    InvalidDataReason["WITHDRAWAL_INVALID_PATH"] = "invalid withdrawal path";
    InvalidDataReason["WITHDRAWAL_INVALID_STAKE_CREDENTIAL"] = "withdrawal stake credential contains both a path and a scripthash or neither";
    InvalidDataReason["AUXILIARY_DATA_UNKNOWN_TYPE"] = "unknown auxiliary data type";
    InvalidDataReason["AUXILIARY_DATA_INVALID_HASH"] = "invalid auxiliary data hash";
    InvalidDataReason["METADATA_UNKNOWN_TYPE"] = "unknown metadata type";
    InvalidDataReason["CATALYST_REGISTRATION_INVALID_VOTING_KEY"] = "invalid Catalyst registration voting key";
    InvalidDataReason["CATALYST_REGISTRATION_INVALID_STAKING_KEY_PATH"] = "invalid Catalyst registration staking key path";
    InvalidDataReason["CATALYST_REGISTRATION_INVALID_REWARDS_DESTINATION_BYRON"] = "Catalyst registration rewards destination cannot be a Byron-era address";
    InvalidDataReason["CATALYST_REGISTRATION_INVALID_NONCE"] = "invalid Catalyst registration nonce";
    InvalidDataReason["VALIDITY_INTERVAL_START_INVALID"] = "invalid validity interval start";
    InvalidDataReason["SCRIPT_DATA_HASH_WRONG_LENGTH"] = "script data hash not 32 bytes long";
    InvalidDataReason["COLLATERAL_INPUTS_NOT_ARRAY"] = "collateral inputs not an array";
    InvalidDataReason["REQUIRED_SIGNERS_NOT_ARRAY"] = "required signers not an array";
    InvalidDataReason["VKEY_HASH_WRONG_LENGTH"] = "vkey hash not 28 bytes long";
    InvalidDataReason["UNKNOWN_REQUIRED_SIGNER_TYPE"] = "unknown required signer type";
    InvalidDataReason["REQUIRED_SIGNER_INVALID_PATH"] = "invalid path for required signer";
    InvalidDataReason["COLLATERAL_INPUT_CONTAINS_DATUM"] = "collateral return output contains datum";
    InvalidDataReason["COLLATERAL_INPUT_CONTAINS_REFERENCE_SCRIPT"] = "collateral return output contains reference script";
    InvalidDataReason["TOTAL_COLLATERAL_NOT_VALID"] = "total collateral not valid";
    InvalidDataReason["REFERENCE_INPUTS_NOT_ARRAY"] = "reference inputs not an array";
    InvalidDataReason["SIGN_MODE_UNKNOWN"] = "unknown signing mode";
    InvalidDataReason["SIGN_MODE_ORDINARY__POOL_REGISTRATION_NOT_ALLOWED"] = "pool registration not allowed in TransactionSigningMode.ORDINARY_TRANSACTION";
    InvalidDataReason["SIGN_MODE_ORDINARY__CERTIFICATE_STAKE_CREDENTIAL_ONLY_AS_PATH"] = "certificate stake credential must be given as a staking path in TransactionSigningMode.ORDINARY_TRANSACTION";
    InvalidDataReason["SIGN_MODE_ORDINARY__WITHDRAWAL_ONLY_AS_PATH"] = "withdrawal must be given as a path in TransactionSigningMode.ORDINARY_TRANSACTION";
    InvalidDataReason["SIGN_MODE_ORDINARY__COLLATERAL_INPUTS_NOT_ALLOWED"] = "collateral inputs not allowed in TransactionSigningMode.ORDINARY_TRANSACTION";
    InvalidDataReason["SIGN_MODE_ORDINARY__COLLATERAL_OUTPUT_NOT_ALLOWED"] = "collateral output not allowed in TransactionSigningMode.ORDINARY_TRANSACTION";
    InvalidDataReason["SIGN_MODE_ORDINARY__TOTAL_COLLATERAL_NOT_ALLOWED"] = "total collateral not allowed in TransactionSigningMode.ORDINARY_TRANSACTION";
    InvalidDataReason["SIGN_MODE_ORDINARY__REFERENCE_INPUTS_NOT_ALLOWED"] = "reference inputs not allowed in TransactionSigningMode.ORDINARY_TRANSACTION";
    InvalidDataReason["SIGN_MODE_MULTISIG__POOL_REGISTRATION_NOT_ALLOWED"] = "pool registration not allowed in TransactionSigningMode.MULTISIG_TRANSACTION";
    InvalidDataReason["SIGN_MODE_MULTISIG__POOL_RETIREMENT_NOT_ALLOWED"] = "pool retirement not allowed in TransactionSigningMode.MULTISIG_TRANSACTION";
    InvalidDataReason["SIGN_MODE_MULTISIG__DEVICE_OWNED_ADDRESS_NOT_ALLOWED"] = "outputs given by path not allowed in TransactionSigningMode.MULTISIG_TRANSACTION";
    InvalidDataReason["SIGN_MODE_MULTISIG__CERTIFICATE_STAKE_CREDENTIAL_ONLY_AS_SCRIPT"] = "certificate stake credential must be given as a script hash in TransactionSigningMode.MULTISIG_TRANSACTION";
    InvalidDataReason["SIGN_MODE_MULTISIG__WITHDRAWAL_ONLY_AS_SCRIPT"] = "withdrawal must be given as a script hash in TransactionSigningMode.MULTISIG_TRANSACTION";
    InvalidDataReason["SIGN_MODE_MULTISIG__COLLATERAL_INPUTS_NOT_ALLOWED"] = "collateral inputs not allowed in TransactionSigningMode.MULTISIG_TRANSACTION";
    InvalidDataReason["SIGN_MODE_MULTISIG__COLLATERAL_OUTPUT_NOT_ALLOWED"] = "collateral output not allowed in TransactionSigningMode.MULTISIG_TRANSACTION";
    InvalidDataReason["SIGN_MODE_MULTISIG__TOTAL_COLLATERAL_NOT_ALLOWED"] = "total collateral not allowed in TransactionSigningMode.MULTISIG_TRANSACTION";
    InvalidDataReason["SIGN_MODE_MULTISIG__REFERENCE_INPUTS_NOT_ALLOWED"] = "reference inputs not allowed in TransactionSigningMode.MULTISIG_TRANSACTION";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__DEVICE_OWNED_ADDRESS_NOT_ALLOWED"] = "outputs given by path are not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__DATUM_NOT_ALLOWED"] = "datum in outputs not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__REFERENCE_SCRIPT_NOT_ALLOWED"] = "reference script in outputs not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__INPUT_WITH_PATH_NOT_ALLOWED"] = "inputs with path not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__SINGLE_POOL_REG_CERTIFICATE_REQUIRED"] = "single pool registration certificate is expected in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__SINGLE_DEVICE_OWNER_REQUIRED"] = "single device-owned pool owner is expected in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__WITHDRAWALS_NOT_ALLOWED"] = "withdrawals not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__MINT_NOT_ALLOWED"] = "mint not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__SCRIPT_DATA_HASH_NOT_ALLOWED"] = "script data hash not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__COLLATERAL_INPUTS_NOT_ALLOWED"] = "collateral inputs not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__TOTAL_COLLATERAL_NOT_ALLOWED"] = "total collateral not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__REQUIRED_SIGNERS_NOT_ALLOWED"] = "required signers not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__THIRD_PARTY_POOL_KEY_REQUIRED"] = "third party pool key is required in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__COLLATERAL_OUTPUT_NOT_ALLOWED"] = "reference inputs not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__REFERENCE_INPUTS_NOT_ALLOWED"] = "reference inputs not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__SINGLE_POOL_REG_CERTIFICATE_REQUIRED"] = "single pool registration certificate is expected in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__DEVICE_OWNED_POOL_KEY_REQUIRED"] = "device owned pool key is required in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__DEVICE_OWNED_POOL_OWNER_NOT_ALLOWED"] = "device-owned pool owner not expected in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__WITHDRAWALS_NOT_ALLOWED"] = "withdrawals not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__MINT_NOT_ALLOWED"] = "mint not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__SCRIPT_DATA_HASH_NOT_ALLOWED"] = "script data hash not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__COLLATERAL_INPUTS_NOT_ALLOWED"] = "collateral inputs not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__REQUIRED_SIGNERS_NOT_ALLOWED"] = "required signers not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__DATUM_NOT_ALLOWED"] = "datum in ouputs not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__REFERENCE_SCRIPT_NOT_ALLOWED"] = "reference script in ouputs not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__COLLATERAL_OUTPUT_NOT_ALLOWED"] = "collateral output not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__TOTAL_COLLATERAL_NOT_ALLOWED"] = "total collateral not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__REFERENCE_INPUTS_NOT_ALLOWED"] = "reference inputs not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_PLUTUS__DEVICE_OWNED_ADDRESS_NOT_ALLOWED"] = "outputs given by path not allowed in TransactionSigningMode.PLUTUS_TRANSACTION";
    InvalidDataReason["SIGN_MODE_PLUTUS__POOL_REGISTRATION_NOT_ALLOWED"] = "pool registration not allowed in TransactionSigningMode.PLUTUS_TRANSACTION";
    InvalidDataReason["ADDITIONAL_WITNESSES_NOT_ARRAY"] = "additional witnesses not an array";
    InvalidDataReason["OPERATIONAL_CERTIFICATE_INVALID_KES_KEY"] = "invalid operational certificate kes key";
    InvalidDataReason["OPERATIONAL_CERTIFICATE_INVALID_KES_PERIOD"] = "invalid operational certificate kes period";
    InvalidDataReason["OPERATIONAL_CERTIFICATE_INVALID_ISSUE_COUNTER"] = "invalid operational certificate issue counter";
    InvalidDataReason["OPERATIONAL_CERTIFICATE_INVALID_COLD_KEY_PATH"] = "invalid operational certificate cold key path";
    InvalidDataReason["DERIVE_NATIVE_SCRIPT_HASH_INVALID_DATA"] = "invalid native script input";
    InvalidDataReason["DERIVE_NATIVE_SCRIPT_HASH_INVALID_KEY_PATH"] = "invalid key path param";
    InvalidDataReason["DERIVE_NATIVE_SCRIPT_HASH_INVALID_KEY_HASH"] = "invalid key hash param";
    InvalidDataReason["DERIVE_NATIVE_SCRIPT_HASH_SCRIPTS_NOT_AN_ARRAY"] = "invalid scripts - scripts is not an array";
    InvalidDataReason["DERIVE_NATIVE_SCRIPT_HASH_INVALID_REQUIRED_COUNT"] = "invalid required count";
    InvalidDataReason["DERIVE_NATIVE_SCRIPT_HASH_INVALID_TOKEN_LOCKING_SLOT"] = "invalid token locking slot";
    InvalidDataReason["DERIVE_NATIVE_SCRIPT_HASH_REQUIRED_COUNT_HIGHER_THAN_NUMBER_OF_SCRIPTS"] = "invalid required count - higher than number of total scripts";
    InvalidDataReason["DERIVE_NATIVE_SCRIPT_HASH_UNKNOWN_TYPE"] = "unknown script type";
    InvalidDataReason["DERIVE_NATIVE_SCRIPT_HASH_INVALID_DISPLAY_FORMAT"] = "invalid native script hash display format";
    InvalidDataReason["LEDGER_POLICY"] = "Action rejected by Ledger's security policy";
    InvalidDataReason["INVALID_B2_HASH"] = "invalid blake2 hashing";
})(InvalidDataReason = exports.InvalidDataReason || (exports.InvalidDataReason = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52YWxpZERhdGFSZWFzb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXJyb3JzL2ludmFsaWREYXRhUmVhc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLElBQVksaUJBMFJYO0FBMVJELFdBQVksaUJBQWlCO0lBRTNCLHVGQUFrRSxDQUFBO0lBQ2xFLGtEQUE2QixDQUFBO0lBRTdCLDhFQUF5RCxDQUFBO0lBQ3pELHNFQUFpRCxDQUFBO0lBQ2pELHNGQUFpRSxDQUFBO0lBRWpFLDZEQUF3QyxDQUFBO0lBQ3hDLDBFQUFxRCxDQUFBO0lBQ3JELDhEQUF5QyxDQUFBO0lBQ3pDLDBFQUFxRCxDQUFBO0lBRXJELCtEQUEwQyxDQUFBO0lBQzFDLG9FQUErQyxDQUFBO0lBQy9DLDBFQUFxRCxDQUFBO0lBQ3JELDRFQUF1RCxDQUFBO0lBQ3ZELG9HQUErRSxDQUFBO0lBQy9FLHFFQUFnRCxDQUFBO0lBQ2hELHlFQUFvRCxDQUFBO0lBQ3BELCtFQUEwRCxDQUFBO0lBQzFELDJGQUFzRSxDQUFBO0lBQ3RFLGlIQUE0RixDQUFBO0lBRTVGLHNHQUFpRixDQUFBO0lBQ2pGLDhIQUF5RyxDQUFBO0lBQ3pHLDBIQUFxRyxDQUFBO0lBQ3JHLHNJQUFpSCxDQUFBO0lBQ2pILDBIQUFxRyxDQUFBO0lBQ3JHLHdJQUFtSCxDQUFBO0lBQ25ILDRIQUF1RyxDQUFBO0lBQ3ZHLHdIQUFtRyxDQUFBO0lBQ25HLHNJQUFpSCxDQUFBO0lBQ2pILGtJQUE2RyxDQUFBO0lBQzdHLDBIQUFxRyxDQUFBO0lBQ3JHLDhJQUF5SCxDQUFBO0lBQ3pILDBJQUFxSCxDQUFBO0lBRXJILGtFQUE2QyxDQUFBO0lBQzdDLDJGQUFzRSxDQUFBO0lBQ3RFLDRGQUF1RSxDQUFBO0lBQ3ZFLGtHQUE2RSxDQUFBO0lBQzdFLDhGQUF5RSxDQUFBO0lBQ3pFLDBGQUFxRSxDQUFBO0lBQ3JFLDBGQUFxRSxDQUFBO0lBQ3JFLGdHQUEyRSxDQUFBO0lBQzNFLHVG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