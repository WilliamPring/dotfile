/**
 * Flowtype definitions for public
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.1
 * @flow
 */

export type bigint_like = number | number | string;
declare export var AddressType: {|
  +BASE_PAYMENT_KEY_STAKE_KEY: 0, // 0
  +BASE_PAYMENT_SCRIPT_STAKE_KEY: 1, // 1
  +BASE_PAYMENT_KEY_STAKE_SCRIPT: 2, // 2
  +BASE_PAYMENT_SCRIPT_STAKE_SCRIPT: 3, // 3
  +POINTER_KEY: 4, // 4
  +POINTER_SCRIPT: 5, // 5
  +ENTERPRISE_KEY: 6, // 6
  +ENTERPRISE_SCRIPT: 7, // 7
  +BYRON: 8, // 8
  +REWARD_KEY: 14, // 14
  +REWARD_SCRIPT: 15, // 15
|};

declare export var CertificateType: {|
  +STAKE_REGISTRATION: 0, // 0
  +STAKE_DEREGISTRATION: 1, // 1
  +STAKE_DELEGATION: 2, // 2
  +STAKE_POOL_REGISTRATION: 3, // 3
  +STAKE_POOL_RETIREMENT: 4, // 4
|};

declare export var RelayType: {|
  +SINGLE_HOST_IP_ADDR: 0, // 0
  +SINGLE_HOST_HOSTNAME: 1, // 1
  +MULTI_HOST: 2, // 2
|};
declare export var HARDENED: 2147483648;
export type BIP32Path = Array<number>;
export type Network = {|
  protocolMagic: number,
  networkId: number,
|};
export type DeviceOwnedAddress =
  | {|
      type: typeof AddressType.BYRON,
      params: AddressParamsByron,
    |}
  | {|
      type:
        | typeof AddressType.BASE_PAYMENT_KEY_STAKE_KEY
        | typeof AddressType.BASE_PAYMENT_SCRIPT_STAKE_KEY
        | typeof AddressType.BASE_PAYMENT_KEY_STAKE_SCRIPT
        | typeof AddressType.BASE_PAYMENT_SCRIPT_STAKE_SCRIPT,
      params: AddressParamsBase,
    |}
  | {|
      type:
        | typeof AddressType.ENTERPRISE_KEY
        | typeof AddressType.ENTERPRISE_SCRIPT,
      params: AddressParamsEnterprise,
    |}
  | {|
      type: typeof AddressType.POINTER_KEY | typeof AddressType.POINTER_SCRIPT,
      params: AddressParamsPointer,
    |}
  | {|
      type: typeof AddressType.REWARD_KEY | typeof AddressType.REWARD_SCRIPT,
      params: AddressParamsReward,
    |};
export type AddressParamsByron = {|
  spendingPath: BIP32Path,
|};
export type SpendingParams =
  | {|
      spendingPath: BIP32Path,
    |}
  | {|
      spendingScriptHashHex: string,
    |};
export type AddressParamsBase = {|
  ...SpendingParams,
  ...
    | {|
        stakingPath: BIP32Path,
      |}
    | {|
        stakingKeyHashHex: string,
      |}
    | {|
        stakingScriptHashHex: string,
      |},
|};
export type AddressParamsEnterprise = SpendingParams;
export type AddressParamsPointer = {|
  ...SpendingParams,
  ...{|
    stakingBlockchainPointer: BlockchainPointer,
  |},
|};
export type AddressParamsReward =
  | {|
      stakingPath: BIP32Path,
    |}
  | {|
      stakingScriptHashHex: string,
    |};
export type OperationalCertificate = {|
  kesPublicKeyHex: string,
  kesPeriod: bigint_like,
  issueCounter: bigint_like,
  coldKeyPath: BIP32Path,
|};
export type TxInput = {|
  txHashHex: string,
  outputIndex: number,
  path: BIP32Path | null,
|};
export type Token = {|
  assetNameHex: string,
  amount: bigint_like,
|};
export type AssetGroup = {|
  policyIdHex: string,
  tokens: Array<Token>,
|};
declare export var DatumType: {|
  +HASH: 0, // 0
  +INLINE: 1, // 1
|};
export type Datum =
  | {|
      type: typeof DatumType.HASH,
      datumHashHex: string,
    |}
  | {|
      type: typeof DatumType.INLINE,
      datumHex: string,
    |};
declare export var TxOutputFormat: {|
  +ARRAY_LEGACY: 0, // 0
  +MAP_BABBAGE: 1, // 1
|};
export type TxOutputAlonzo = {|
  format?: typeof TxOutputFormat.ARRAY_LEGACY,
  destination: TxOutputDestination,
  amount: bigint_like,
  tokenBundle?: Array<AssetGroup> | null,
  datumHashHex?: string | null,
|};
export type TxOutputBabbage = {|
  format: typeof TxOutputFormat.MAP_BABBAGE,
  destination: TxOutputDestination,
  amount: bigint_like,
  tokenBundle?: Array<AssetGroup> | null,
  datum?: Datum | null,
  referenceScriptHex?: string | null,
|};
export type TxOutput = TxOutputAlonzo | TxOutputBabbage;
declare export var TxOutputDestinationType: {|
  +THIRD_PARTY: "third_party", // "third_party"
  +DEVICE_OWNED: "device_owned", // "device_owned"
|};
export type ThirdPartyAddressParams = {|
  addressHex: string,
|};
export type TxOutputDestination =
  | {|
      type: typeof TxOutputDestinationType.THIRD_PARTY,
      params: ThirdPartyAddressParams,
    |}
  | {|
      type: typeof TxOutputDestinationType.DEVICE_OWNED,
      params: DeviceOwnedAddress,
    |};
export type BlockchainPointer = {|
  blockIndex: number,
  txIndex: number,
  certificateIndex: number,
|};
declare export var PoolKeyType: {|
  +THIRD_PARTY: "third_party", // "third_party"
  +DEVICE_OWNED: "device_owned", // "device_owned"
|};
export type PoolKey =
  | {|
      type: typeof PoolKeyType.THIRD_PARTY,
      params: PoolKeyThirdPartyParams,
    |}
  | {|
      type: typeof PoolKeyType.DEVICE_OWNED,
      params: PoolKeyDeviceOwnedParams,
    |};
export type PoolKeyThirdPartyParams = {|
  keyHashHex: string,
|};
export type PoolKeyDeviceOwnedParams = {|
  path: BIP32Path,
|};
declare export var PoolOwnerType: {|
  +THIRD_PARTY: "third_party", // "third_party"
  +DEVICE_OWNED: "device_owned", // "device_owned"
|};
export type PoolOwner =
  | {|
      type: typeof PoolOwnerType.THIRD_PARTY,
      params: PoolOwnerThirdPartyParams,
    |}
  | {|
      type: typeof PoolOwnerType.DEVICE_OWNED,
      params: PoolOwnerDeviceOwnedParams,
    |};
export type PoolOwnerThirdPartyParams = {|
  stakingKeyHashHex: string,
|};
export type PoolOwnerDeviceOwnedParams = {|
  stakingPath: BIP32Path,
|};
declare export var PoolRewardAccountType: {|
  +THIRD_PARTY: "third_party", // "third_party"
  +DEVICE_OWNED: "device_owned", // "device_owned"
|};
export type PoolRewardAccount =
  | {|
      type: typeof PoolRewardAccountType.THIRD_PARTY,
      params: PoolRewardAccountThirdPartyParams,
    |}
  | {|
      type: typeof PoolRewardAccountType.DEVICE_OWNED,
      params: PoolRewardAccountDeviceOwnedParams,
    |};
export type PoolRewardAccountThirdPartyParams = {|
  rewardAccountHex: string,
|};
export type PoolRewardAccountDeviceOwnedParams = {|
  path: BIP32Path,
|};
export type SingleHostIpAddrRelayParams = {|
  portNumber?: number | null,
  ipv4?: string | null,
  ipv6?: string | null,
|};
export type SingleHostHostnameRelayParams = {|
  portNumber?: number | null,
  dnsName: string,
|};
export type MultiHostRelayParams = {|
  dnsName: string,
|};
export type Relay =
  | {|
      type: typeof RelayType.SINGLE_HOST_IP_ADDR,
      params: SingleHostIpAddrRelayParams,
    |}
  | {|
      type: typeof RelayType.SINGLE_HOST_HOSTNAME,
      params: SingleHostHostnameRelayParams,
    |}
  | {|
      type: typeof RelayType.MULTI_HOST,
      params: MultiHostRelayParams,
    |};
export type PoolMetadataParams = {|
  metadataUrl: string,
  metadataHashHex: string,
|};
export type Margin = {|
  numerator: bigint_like,
  denominator: bigint_like,
|};
export type PoolRegistrationParams = {|
  poolKey: PoolKey,
  vrfKeyHashHex: string,
  pledge: bigint_like,
  cost: bigint_like,
  margin: Margin,
  rewardAccount: PoolRewardAccount,
  poolOwners: Array<PoolOwner>,
  relays: Array<Relay>,
  metadata?: PoolMetadataParams | null,
|};
export type PoolRetirementParams = {|
  poolKeyPath: BIP32Path,
  retirementEpoch: bigint_like,
|};
declare export var StakeCredentialParamsType: {|
  +KEY_PATH: 0, // 0
  +KEY_HASH: 1, // 1
  +SCRIPT_HASH: 2, // 2
|};
export type KeyPathStakeCredentialParams = {|
  type: typeof StakeCredentialParamsType.KEY_PATH,
  keyPath: BIP32Path,
|};
export type KeyHashStakeCredentialParams = {|
  type: typeof StakeCredentialParamsType.KEY_HASH,
  keyHashHex: string,
|};
export type ScriptStakeCredentialParams = {|
  type: typeof StakeCredentialParamsType.SCRIPT_HASH,
  scriptHashHex: string,
|};
export type StakeCredentialParams =
  | KeyPathStakeCredentialParams
  | KeyHashStakeCredentialParams
  | ScriptStakeCredentialParams;
export type StakeRegistrationParams = {|
  stakeCredential: StakeCredentialParams,
|};
export type StakeDeregistrationParams = {|
  stakeCredential: StakeCredentialParams,
|};
export type StakeDelegationParams = {|
  stakeCredential: StakeCredentialParams,
  poolKeyHashHex: string,
|};
export type Certificate =
  | {|
      type: typeof CertificateType.STAKE_REGISTRATION,
      params: StakeRegistrationParams,
    |}
  | {|
      type: typeof CertificateType.STAKE_DEREGISTRATION,
      params: StakeDeregistrationParams,
    |}
  | {|
      type: typeof CertificateType.STAKE_DELEGATION,
      params: StakeDelegationParams,
    |}
  | {|
      type: typeof CertificateType.STAKE_POOL_REGISTRATION,
      params: PoolRegistrationParams,
    |}
  | {|
      type: typeof CertificateType.STAKE_POOL_RETIREMENT,
      params: PoolRetirementParams,
    |};
export type Withdrawal = {|
  stakeCredential: StakeCredentialParams,
  amount: bigint_like,
|};
export type Flags = {|
  isDebug: boolean,
|};
export type Version = {|
  major: number,
  minor: number,
  patch: number,
  flags: Flags,
|};
export type DeviceCompatibility = {|
  isCompatible: boolean,
  recommendedVersion: string | null,
  supportsMary: boolean,
  supportsCatalystRegistration: boolean,
  supportsZeroTtl: boolean,
  supportsPoolRegistrationAsOperator: boolean,
  supportsPoolRetirement: boolean,
  supportsNativeScriptHashDerivation: boolean,
  supportsMultisigTransaction: boolean,
  supportsMint: boolean,
  supportsAlonzo: boolean,
  supportsReqSignersInOrdinaryTx: boolean,
  supportsBabbage: boolean,
|};
export type Serial = {|
  serialHex: string,
|};
export type DerivedAddress = {|
  addressHex: string,
|};
export type ExtendedPublicKey = {|
  publicKeyHex: string,
  chainCodeHex: string,
|};
export type OperationalCertificateSignature = {|
  signatureHex: string,
|};
export type Witness = {|
  path: BIP32Path,
  witnessSignatureHex: string,
|};
declare export var TxAuxiliaryDataSupplementType: {|
  +CATALYST_REGISTRATION: "catalyst_registration", // "catalyst_registration"
|};
export type TxAuxiliaryDataSupplement = {|
  type: typeof TxAuxiliaryDataSupplementType.CATALYST_REGISTRATION,
  auxiliaryDataHashHex: string,
  catalystRegistrationSignatureHex: string,
|};
export type SignedTransactionData = {|
  txHashHex: string,
  witnesses: Array<Witness>,
  auxiliaryDataSupplement: TxAuxiliaryDataSupplement | null,
|};
declare export var TxAuxiliaryDataType: {|
  +ARBITRARY_HASH: "arbitrary_hash", // "arbitrary_hash"
  +CATALYST_REGISTRATION: "catalyst_registration", // "catalyst_registration"
|};
export type TxAuxiliaryData =
  | {|
      type: typeof TxAuxiliaryDataType.ARBITRARY_HASH,
      params: TxAuxiliaryDataArbitraryHashParams,
    |}
  | {|
      type: typeof TxAuxiliaryDataType.CATALYST_REGISTRATION,
      params: CatalystRegistrationParams,
    |};
export type TxAuxiliaryDataArbitraryHashParams = {|
  hashHex: string,
|};
export type CatalystRegistrationParams = {|
  votingPublicKeyHex: string,
  stakingPath: BIP32Path,
  rewardsDestination: DeviceOwnedAddress,
  nonce: bigint_like,
|};
declare export var TxRequiredSignerType: {|
  +PATH: "required_signer_path", // "required_signer_path"
  +HASH: "required_signer_hash", // "required_signer_hash"
|};
export type RequiredSigner =
  | {|
      type: typeof TxRequiredSignerType.PATH,
      path: BIP32Path,
    |}
  | {|
      type: typeof TxRequiredSignerType.HASH,
      hashHex: string,
    |};
export type Transaction = {|
  network: Network,
  inputs: Array<TxInput>,
  outputs: Array<TxOutput>,
  fee: bigint_like,
  ttl?: bigint_like | null,
  certificates?: Array<Certificate> | null,
  withdrawals?: Array<Withdrawal> | null,
  auxiliaryData?: TxAuxiliaryData | null,
  validityIntervalStart?: bigint_like | null,
  mint?: Array<AssetGroup> | null,
  scriptDataHashHex?: string | null,
  collateralInputs?: Array<TxInput> | null,
  requiredSigners?: Array<RequiredSigner> | null,
  includeNetworkId?: boolean | null,
  collateralOutput?: TxOutput | null,
  totalCollateral?: bigint_like | null,
  referenceInputs?: Array<TxInput> | null,
|};
declare export var TransactionSigningMode: {|
  +ORDINARY_TRANSACTION: "ordinary_transaction", // "ordinary_transaction"
  +MULTISIG_TRANSACTION: "multisig_transaction", // "multisig_transaction"
  +POOL_REGISTRATION_AS_OWNER: "pool_registration_as_owner", // "pool_registration_as_owner"
  +POOL_REGISTRATION_AS_OPERATOR: "pool_registration_as_operator", // "pool_registration_as_operator"
  +PLUTUS_TRANSACTION: "plutus_transaction", // "plutus_transaction"
|};
export type SignTransactionRequest = {|
  signingMode: $Values<typeof TransactionSigningMode>,
  tx: Transaction,
  additionalWitnessPaths?: BIP32Path[],
|};
declare export var NativeScriptType: {|
  +PUBKEY_DEVICE_OWNED: "pubkey_device_owned", // "pubkey_device_owned"
  +PUBKEY_THIRD_PARTY: "pubkey_third_party", // "pubkey_third_party"
  +ALL: "all", // "all"
  +ANY: "any", // "any"
  +N_OF_K: "n_of_k", // "n_of_k"
  +INVALID_BEFORE: "invalid_before", // "invalid_before"
  +INVALID_HEREAFTER: "invalid_hereafter", // "invalid_hereafter"
|};
export type NativeScript =
  | {|
      type: typeof NativeScriptType.PUBKEY_DEVICE_OWNED,
      params: NativeScriptParamsDeviceOwnedPubkey,
    |}
  | {|
      type: typeof NativeScriptType.PUBKEY_THIRD_PARTY,
      params: NativeScriptParamsThirdPartyPubkey,
    |}
  | {|
      type: typeof NativeScriptType.ALL,
      params: NativeScriptParamsAll,
    |}
  | {|
      type: typeof NativeScriptType.ANY,
      params: NativeScriptParamsAny,
    |}
  | {|
      type: typeof NativeScriptType.N_OF_K,
      params: NativeScriptParamsNofK,
    |}
  | {|
      type: typeof NativeScriptType.INVALID_BEFORE,
      params: NativeScriptParamsInvalidBefore,
    |}
  | {|
      type: typeof NativeScriptType.INVALID_HEREAFTER,
      params: NativeScriptParamsInvalidHereafter,
    |};
export type NativeScriptParamsDeviceOwnedPubkey = {|
  path: BIP32Path,
|};
export type NativeScriptParamsThirdPartyPubkey = {|
  keyHashHex: string,
|};
export type NativeScriptParamsAll = {|
  scripts: NativeScript[],
|};
export type NativeScriptParamsAny = {|
  scripts: NativeScript[],
|};
export type NativeScriptParamsNofK = {|
  requiredCount: bigint_like,
  scripts: NativeScript[],
|};
export type NativeScriptParamsInvalidBefore = {|
  slot: bigint_like,
|};
export type NativeScriptParamsInvalidHereafter = {|
  slot: bigint_like,
|};
export type NativeScriptHash = {|
  scriptHashHex: string,
|};
declare export var NativeScriptHashDisplayFormat: {|
  +BECH32: "bech32", // "bech32"
  +POLICY_ID: "policyId", // "policyId"
|};
