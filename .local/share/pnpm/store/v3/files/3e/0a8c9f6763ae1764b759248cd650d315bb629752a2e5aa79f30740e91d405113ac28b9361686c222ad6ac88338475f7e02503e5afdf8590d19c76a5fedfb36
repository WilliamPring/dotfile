"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bootstrap = void 0;
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
const vite_1 = require("vite");
const build_1 = require("./build");
async function bootstrap(config, server) {
    const electronPath = require('electron');
    const { config: viteConfig } = server;
    if (config.preload) {
        const preloadConfig = (0, vite_1.mergeConfig)((0, build_1.resolveBuildConfig)('preload', config, viteConfig), {
            mode: 'development',
            build: {
                watch: true,
            },
            plugins: [{
                    name: 'electron-preload-watcher',
                    writeBundle() {
                        server.ws.send({ type: 'full-reload' });
                    },
                }],
        });
        await (0, vite_1.build)(preloadConfig);
    }
    // ----------------------------------------------------------------
    let electronProcess = null;
    const address = server.httpServer.address();
    const env = Object.assign(process.env, {
        VITE_DEV_SERVER_HOST: address.address,
        VITE_DEV_SERVER_PORT: address.port,
    });
    const mainConfig = (0, vite_1.mergeConfig)((0, build_1.resolveBuildConfig)('main', config, viteConfig), {
        mode: 'development',
        build: {
            watch: true,
        },
        plugins: [{
                name: 'electron-main-watcher',
                writeBundle() {
                    if (electronProcess) {
                        electronProcess.removeAllListeners();
                        electronProcess.kill();
                    }
                    // TODO: Check if electronEntry is a directory
                    let electronEntry = path_1.default.join(mainConfig.build.outDir, path_1.default.parse(config.main.entry).name);
                    // Start Electron.app
                    electronProcess = (0, child_process_1.spawn)(electronPath, [electronEntry], { stdio: 'inherit', env });
                    // Exit command after Electron.app exits
                    electronProcess.once('exit', process.exit);
                },
            }],
    });
    await (0, vite_1.build)(mainConfig);
}
exports.bootstrap = bootstrap;
