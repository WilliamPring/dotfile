import { Logger, RpcNode, RpcError, RpcErrorCode, createPermissionDenied, ServerError, } from "@ledgerhq/wallet-api-core";
import { BehaviorSubject, combineLatest } from "rxjs";
import { filterAccountsForCurrencies, matchCurrencies } from "./helpers";
import { internalHandlers } from "./internalHandlers";
const defaultLogger = new Logger("Wallet-API-Server");
export class WalletAPIServer extends RpcNode {
    logger;
    walletContext;
    allAccounts$ = new BehaviorSubject([]);
    allCurrencies$ = new BehaviorSubject([]);
    walletHandlers = {};
    permissions = {
        currencyIds$: new BehaviorSubject([]),
        methodIds$: new BehaviorSubject([]),
    };
    setPermissions(permission) {
        this.permissions.currencyIds$.next(permission.currencyIds);
        this.permissions.methodIds$.next(permission.methodIds);
        return this;
    }
    setCurrencies(currencies) {
        this.allCurrencies$.next(currencies);
        return this;
    }
    setAccounts(accounts) {
        this.allAccounts$.next(accounts);
        return this;
    }
    setHandler(methodName, method) {
        this.walletHandlers[methodName] = method;
        return this;
    }
    async onRequest(request) {
        const methodId = request.method;
        const handler = this.requestHandlers[methodId];
        if (!handler) {
            this.logger.error(`no request handler found for methodId ${request.method}`);
            throw new RpcError({
                code: RpcErrorCode.METHOD_NOT_FOUND,
                message: "method not found",
            });
        }
        const allowedMethodIds = new Set(this.permissions.methodIds$.getValue());
        if (!allowedMethodIds.has(methodId)) {
            throw new ServerError(createPermissionDenied(methodId));
        }
        return handler(request, this.walletContext, this.walletHandlers);
    }
    constructor(transport, config, logger = defaultLogger) {
        super(transport, internalHandlers);
        this.logger = logger;
        const allowedCurrencies$ = new BehaviorSubject([]);
        combineLatest([this.allCurrencies$, this.permissions.currencyIds$], matchCurrencies).subscribe(allowedCurrencies$);
        const allowedAccounts$ = new BehaviorSubject([]);
        combineLatest([this.allAccounts$, allowedCurrencies$], filterAccountsForCurrencies).subscribe(allowedAccounts$);
        this.walletContext = {
            currencies$: allowedCurrencies$,
            accounts$: allowedAccounts$,
            config,
        };
        this.walletContext.accounts$.subscribe(() => {
            this.notify("event.account.updated", undefined);
        });
    }
}
