"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseSignTransactionRequest = exports.parseSigningMode = exports.parseTransaction = void 0;
const errors_1 = require("../errors");
const invalidDataReason_1 = require("../errors/invalidDataReason");
const internal_1 = require("../types/internal");
const public_1 = require("../types/public");
const assert_1 = require("../utils/assert");
const parse_1 = require("../utils/parse");
const address_1 = require("./address");
const certificate_1 = require("./certificate");
const constants_1 = require("./constants");
const network_1 = require("./network");
const txAuxiliaryData_1 = require("./txAuxiliaryData");
function parseCertificates(certificates) {
    parse_1.validate(parse_1.isArray(certificates), invalidDataReason_1.InvalidDataReason.CERTIFICATES_NOT_ARRAY);
    const parsed = certificates.map(cert => certificate_1.parseCertificate(cert));
    return parsed;
}
function parseToken(token, parseTokenAmountFn) {
    const assetNameHex = parse_1.parseHexString(token.assetNameHex, invalidDataReason_1.InvalidDataReason.MULTIASSET_INVALID_ASSET_NAME);
    parse_1.validate(token.assetNameHex.length <= internal_1.ASSET_NAME_LENGTH_MAX * 2, invalidDataReason_1.InvalidDataReason.MULTIASSET_INVALID_ASSET_NAME);
    const amount = parseTokenAmountFn(token.amount, {}, invalidDataReason_1.InvalidDataReason.MULTIASSET_INVALID_TOKEN_AMOUNT);
    return {
        assetNameHex,
        amount,
    };
}
function parseAssetGroup(assetGroup, parseTokenAmountFn) {
    parse_1.validate(parse_1.isArray(assetGroup.tokens), invalidDataReason_1.InvalidDataReason.MULTIASSET_INVALID_ASSET_GROUP_NOT_ARRAY);
    parse_1.validate(assetGroup.tokens.length <= constants_1.TOKENS_IN_GROUP_MAX, invalidDataReason_1.InvalidDataReason.MULTIASSET_INVALID_ASSET_GROUP_TOO_LARGE);
    parse_1.validate(assetGroup.tokens.length > 0, invalidDataReason_1.InvalidDataReason.MULTIASSET_INVALID_ASSET_GROUP_EMPTY);
    const parsedAssetGroup = {
        policyIdHex: parse_1.parseHexStringOfLength(assetGroup.policyIdHex, internal_1.TOKEN_POLICY_LENGTH, invalidDataReason_1.InvalidDataReason.MULTIASSET_INVALID_POLICY_NAME),
        tokens: assetGroup.tokens.map(t => parseToken(t, parseTokenAmountFn)),
    };
    const assetNamesHex = parsedAssetGroup.tokens.map(t => t.assetNameHex);
    parse_1.validate(assetNamesHex.length === new Set(assetNamesHex).size, invalidDataReason_1.InvalidDataReason.MULTIASSET_INVALID_ASSET_GROUP_NOT_UNIQUE);
    const sortedAssetNames = [...assetNamesHex].sort((n1, n2) => {
        if (n1.length === n2.length)
            return n1.localeCompare(n2);
        else
            return n1.length - n2.length;
    });
    parse_1.validate(JSON.stringify(assetNamesHex) === JSON.stringify(sortedAssetNames), invalidDataReason_1.InvalidDataReason.MULTIASSET_INVALID_ASSET_GROUP_ORDERING);
    return parsedAssetGroup;
}
function parseTokenBundle(tokenBundle, emptyTokenBundleAllowed, parseTokenAmountFn) {
    parse_1.validate(parse_1.isArray(tokenBundle), invalidDataReason_1.InvalidDataReason.MULTIASSET_INVALID_TOKEN_BUNDLE_NOT_ARRAY);
    parse_1.validate(tokenBundle.length <= constants_1.ASSET_GROUPS_MAX, invalidDataReason_1.InvalidDataReason.MULTIASSET_INVALID_TOKEN_BUNDLE_TOO_LARGE);
    parse_1.validate(emptyTokenBundleAllowed || tokenBundle.length > 0, invalidDataReason_1.InvalidDataReason.MULTIASSET_INVALID_TOKEN_BUNDLE_EMPTY);
    const parsedTokenBundle = tokenBundle.map(ag => parseAssetGroup(ag, parseTokenAmountFn));
    const policyIds = parsedTokenBundle.map(ag => ag.policyIdHex);
    parse_1.validate(policyIds.length === new Set(policyIds).size, invalidDataReason_1.InvalidDataReason.MULTIASSET_INVALID_TOKEN_BUNDLE_NOT_UNIQUE);
    const sortedPolicyIds = [...policyIds].sort();
    parse_1.validate(JSON.stringify(policyIds) === JSON.stringify(sortedPolicyIds), invalidDataReason_1.InvalidDataReason.MULTIASSET_INVALID_TOKEN_BUNDLE_ORDERING);
    return parsedTokenBundle;
}
function parseDatumHash(datumHashHex) {
    return {
        type: public_1.DatumType.HASH,
        datumHashHex: parse_1.parseHexStringOfLength(datumHashHex, internal_1.DATUM_HASH_LENGTH, invalidDataReason_1.InvalidDataReason.OUTPUT_INVALID_DATUM_HASH),
    };
}
function parseDatum(output) {
    var _a, _b;
    if (output.format === public_1.TxOutputFormat.MAP_BABBAGE) {
        switch ((_a = output.datum) === null || _a === void 0 ? void 0 : _a.type) {
            case public_1.DatumType.HASH:
                return parseDatumHash((_b = output.datum) === null || _b === void 0 ? void 0 : _b.datumHashHex);
            case public_1.DatumType.INLINE:
                return {
                    type: public_1.DatumType.INLINE,
                    datumHex: parse_1.parseHexString(output.datum.datumHex, invalidDataReason_1.InvalidDataReason.OUTPUT_INVALID_INLINE_DATUM),
                };
            default:
                return null;
        }
    }
    else {
        return output.datumHashHex == null
            ? null
            : parseDatumHash(output.datumHashHex);
    }
}
function parseBoolean(value, errorMsg) {
    parse_1.validate(typeof value === 'boolean', errorMsg);
    return value;
}
function parseTransaction(tx) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const network = network_1.parseNetwork(tx.network);
    parse_1.validate(parse_1.isArray(tx.inputs), invalidDataReason_1.InvalidDataReason.INPUTS_NOT_ARRAY);
    const inputs = tx.inputs.map(inp => parseTxInput(inp));
    parse_1.validate(parse_1.isArray(tx.outputs), invalidDataReason_1.InvalidDataReason.OUTPUTS_NOT_ARRAY);
    const outputs = tx.outputs.map(o => parseTxOutput(o, tx.network));
    const fee = parse_1.parseUint64_str(tx.fee, { max: constants_1.MAX_LOVELACE_SUPPLY_STR }, invalidDataReason_1.InvalidDataReason.FEE_INVALID);
    const ttl = tx.ttl == null
        ? null
        : parse_1.parseUint64_str(tx.ttl, {}, invalidDataReason_1.InvalidDataReason.TTL_INVALID);
    parse_1.validate(parse_1.isArray((_a = tx.certificates) !== null && _a !== void 0 ? _a : []), invalidDataReason_1.InvalidDataReason.CERTIFICATES_NOT_ARRAY);
    const certificates = parseCertificates((_b = tx.certificates) !== null && _b !== void 0 ? _b : []);
    parse_1.validate(parse_1.isArray((_c = tx.withdrawals) !== null && _c !== void 0 ? _c : []), invalidDataReason_1.InvalidDataReason.WITHDRAWALS_NOT_ARRAY);
    const withdrawals = ((_d = tx.withdrawals) !== null && _d !== void 0 ? _d : []).map(w => parseWithdrawal(w));
    const auxiliaryData = tx.auxiliaryData == null
        ? null
        : txAuxiliaryData_1.parseTxAuxiliaryData(network, tx.auxiliaryData);
    const validityIntervalStart = tx.validityIntervalStart == null
        ? null
        : parse_1.parseUint64_str(tx.validityIntervalStart, {}, invalidDataReason_1.InvalidDataReason.VALIDITY_INTERVAL_START_INVALID);
    const mint = tx.mint == null
        ? null
        : parseTokenBundle(tx.mint, false, parse_1.parseInt64_str);
    const scriptDataHashHex = tx.scriptDataHashHex == null
        ? null
        : parse_1.parseHexStringOfLength(tx.scriptDataHashHex, internal_1.SCRIPT_DATA_HASH_LENGTH, invalidDataReason_1.InvalidDataReason.SCRIPT_DATA_HASH_WRONG_LENGTH);
    parse_1.validate(parse_1.isArray((_e = tx.collateralInputs) !== null && _e !== void 0 ? _e : []), invalidDataReason_1.InvalidDataReason.COLLATERAL_INPUTS_NOT_ARRAY);
    const collateralInputs = ((_f = tx.collateralInputs) !== null && _f !== void 0 ? _f : []).map(inp => parseTxInput(inp));
    parse_1.validate(parse_1.isArray((_g = tx.requiredSigners) !== null && _g !== void 0 ? _g : []), invalidDataReason_1.InvalidDataReason.REQUIRED_SIGNERS_NOT_ARRAY);
    const requiredSigners = ((_h = tx.requiredSigners) !== null && _h !== void 0 ? _h : []).map(rs => parseRequiredSigner(rs));
    const includeNetworkId = tx.includeNetworkId == null
        ? false
        : parseBoolean(tx.includeNetworkId, invalidDataReason_1.InvalidDataReason.NETWORK_ID_INCLUDE_INVALID);
    const collateralOutput = tx.collateralOutput == null
        ? null
        : parseTxOutput(tx.collateralOutput, tx.network);
    parse_1.validate((collateralOutput === null || collateralOutput === void 0 ? void 0 : collateralOutput.datum) == null, invalidDataReason_1.InvalidDataReason.COLLATERAL_INPUT_CONTAINS_DATUM);
    parse_1.validate((collateralOutput === null || collateralOutput === void 0 ? void 0 : collateralOutput.referenceScriptHex) == null, invalidDataReason_1.InvalidDataReason.COLLATERAL_INPUT_CONTAINS_REFERENCE_SCRIPT);
    const totalCollateral = tx.totalCollateral == null
        ? null
        : parse_1.parseUint64_str(tx.totalCollateral, { max: constants_1.MAX_LOVELACE_SUPPLY_STR }, invalidDataReason_1.InvalidDataReason.TOTAL_COLLATERAL_NOT_VALID);
    parse_1.validate(parse_1.isArray((_j = tx.referenceInputs) !== null && _j !== void 0 ? _j : []), invalidDataReason_1.InvalidDataReason.REFERENCE_INPUTS_NOT_ARRAY);
    const referenceInputs = ((_k = tx.referenceInputs) !== null && _k !== void 0 ? _k : []).map(ri => parseTxInput(ri));
    return {
        network,
        inputs,
        outputs,
        ttl,
        auxiliaryData,
        validityIntervalStart,
        withdrawals,
        certificates,
        fee,
        mint,
        scriptDataHashHex,
        collateralInputs,
        requiredSigners,
        includeNetworkId,
        collateralOutput,
        totalCollateral,
        referenceInputs,
    };
}
exports.parseTransaction = parseTransaction;
function parseTxInput(input) {
    const txHashHex = parse_1.parseHexStringOfLength(input.txHashHex, internal_1.TX_HASH_LENGTH, invalidDataReason_1.InvalidDataReason.INPUT_INVALID_TX_HASH);
    const outputIndex = parse_1.parseUint32_t(input.outputIndex, invalidDataReason_1.InvalidDataReason.INPUT_INVALID_UTXO_INDEX);
    return {
        txHashHex,
        outputIndex,
        path: input.path != null ? parse_1.parseBIP32Path(input.path, invalidDataReason_1.InvalidDataReason.INPUT_INVALID_PATH) : null,
    };
}
function parseWithdrawal(params) {
    return {
        amount: parse_1.parseUint64_str(params.amount, { max: constants_1.MAX_LOVELACE_SUPPLY_STR }, invalidDataReason_1.InvalidDataReason.WITHDRAWAL_INVALID_AMOUNT),
        stakeCredential: parse_1.parseStakeCredential(params.stakeCredential, invalidDataReason_1.InvalidDataReason.WITHDRAWAL_INVALID_STAKE_CREDENTIAL),
    };
}
function parseTxDestination(network, destination) {
    switch (destination.type) {
        case public_1.TxOutputDestinationType.THIRD_PARTY: {
            const params = destination.params;
            const addressHex = parse_1.parseHexString(params.addressHex, invalidDataReason_1.InvalidDataReason.OUTPUT_INVALID_ADDRESS);
            parse_1.validate(params.addressHex.length <= 128 * 2, invalidDataReason_1.InvalidDataReason.OUTPUT_INVALID_ADDRESS);
            return {
                type: public_1.TxOutputDestinationType.THIRD_PARTY,
                addressHex,
            };
        }
        case public_1.TxOutputDestinationType.DEVICE_OWNED: {
            const params = destination.params;
            const addressParams = address_1.parseAddress(network, params);
            parse_1.validate(addressParams.spendingDataSource.type == "spending_path", invalidDataReason_1.InvalidDataReason.OUTPUT_INVALID_ADDRESS_PARAMS);
            return {
                type: public_1.TxOutputDestinationType.DEVICE_OWNED,
                addressParams: addressParams,
            };
        }
        default:
            throw new errors_1.InvalidData(invalidDataReason_1.InvalidDataReason.ADDRESS_UNKNOWN_TYPE);
    }
}
function parseTxOutput(output, network) {
    var _a;
    const format = output.format === public_1.TxOutputFormat.MAP_BABBAGE
        ? public_1.TxOutputFormat.MAP_BABBAGE
        : public_1.TxOutputFormat.ARRAY_LEGACY;
    const amount = parse_1.parseUint64_str(output.amount, { max: constants_1.MAX_LOVELACE_SUPPLY_STR }, invalidDataReason_1.InvalidDataReason.OUTPUT_INVALID_AMOUNT);
    const tokenBundle = parseTokenBundle((_a = output.tokenBundle) !== null && _a !== void 0 ? _a : [], true, parse_1.parseUint64_str);
    const destination = parseTxDestination(network, output.destination);
    const datum = parseDatum(output);
    if ((datum === null || datum === void 0 ? void 0 : datum.type) === public_1.DatumType.INLINE) {
        parse_1.validate(output.format === public_1.TxOutputFormat.MAP_BABBAGE, invalidDataReason_1.InvalidDataReason.OUTPUT_INCONSISTENT_DATUM);
    }
    const referenceScriptHex = output.format === public_1.TxOutputFormat.MAP_BABBAGE && output.referenceScriptHex
        ? parse_1.parseHexString(output.referenceScriptHex, invalidDataReason_1.InvalidDataReason.OUTPUT_INVALID_REFERENCE_SCRIPT_HEX)
        : null;
    if (referenceScriptHex != null) {
        parse_1.validate(output.format === public_1.TxOutputFormat.MAP_BABBAGE, invalidDataReason_1.InvalidDataReason.OUTPUT_INCONSISTENT_REFERENCE_SCRIPT);
    }
    return {
        format,
        amount,
        tokenBundle,
        destination,
        datum,
        referenceScriptHex,
    };
}
function parseRequiredSigner(requiredSigner) {
    switch (requiredSigner.type) {
        case public_1.TxRequiredSignerType.PATH:
            return {
                type: 0,
                path: parse_1.parseBIP32Path(requiredSigner.path, invalidDataReason_1.InvalidDataReason.REQUIRED_SIGNER_INVALID_PATH),
            };
        case public_1.TxRequiredSignerType.HASH:
            return {
                type: 1,
                hashHex: parse_1.parseHexStringOfLength(requiredSigner.hashHex, internal_1.KEY_HASH_LENGTH, invalidDataReason_1.InvalidDataReason.VKEY_HASH_WRONG_LENGTH),
            };
        default:
            throw new errors_1.InvalidData(invalidDataReason_1.InvalidDataReason.UNKNOWN_REQUIRED_SIGNER_TYPE);
    }
}
function parseSigningMode(mode) {
    switch (mode) {
        case public_1.TransactionSigningMode.ORDINARY_TRANSACTION:
        case public_1.TransactionSigningMode.POOL_REGISTRATION_AS_OWNER:
        case public_1.TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR:
        case public_1.TransactionSigningMode.MULTISIG_TRANSACTION:
        case public_1.TransactionSigningMode.PLUTUS_TRANSACTION:
            return mode;
        default:
            throw new errors_1.InvalidData(invalidDataReason_1.InvalidDataReason.SIGN_MODE_UNKNOWN);
    }
}
exports.parseSigningMode = parseSigningMode;
function parseSignTransactionRequest(request) {
    var _a, _b;
    const tx = parseTransaction(request.tx);
    const signingMode = parseSigningMode(request.signingMode);
    parse_1.validate(parse_1.isArray((_a = request.additionalWitnessPaths) !== null && _a !== void 0 ? _a : []), invalidDataReason_1.InvalidDataReason.ADDITIONAL_WITNESSES_NOT_ARRAY);
    const additionalWitnessPaths = ((_b = request.additionalWitnessPaths) !== null && _b !== void 0 ? _b : []).map(path => parse_1.parseBIP32Path(path, invalidDataReason_1.InvalidDataReason.INVALID_PATH));
    switch (signingMode) {
        case public_1.TransactionSigningMode.ORDINARY_TRANSACTION: {
            parse_1.validate(tx.certificates.every(certificate => certificate.type !== internal_1.CertificateType.STAKE_POOL_REGISTRATION), invalidDataReason_1.InvalidDataReason.SIGN_MODE_ORDINARY__POOL_REGISTRATION_NOT_ALLOWED);
            parse_1.validate(tx.certificates.every(certificate => {
                switch (certificate.type) {
                    case internal_1.CertificateType.STAKE_REGISTRATION:
                    case internal_1.CertificateType.STAKE_DEREGISTRATION:
                    case internal_1.CertificateType.STAKE_DELEGATION:
                        return certificate.stakeCredential.type === 0;
                    default:
                        return true;
                }
            }), invalidDataReason_1.InvalidDataReason.SIGN_MODE_ORDINARY__CERTIFICATE_STAKE_CREDENTIAL_ONLY_AS_PATH);
            parse_1.validate(tx.withdrawals.every(withdrawal => withdrawal.stakeCredential.type === 0), invalidDataReason_1.InvalidDataReason.SIGN_MODE_ORDINARY__WITHDRAWAL_ONLY_AS_PATH);
            parse_1.validate(tx.collateralInputs.length === 0, invalidDataReason_1.InvalidDataReason.SIGN_MODE_ORDINARY__COLLATERAL_INPUTS_NOT_ALLOWED);
            parse_1.validate(tx.collateralOutput === null, invalidDataReason_1.InvalidDataReason.SIGN_MODE_ORDINARY__COLLATERAL_OUTPUT_NOT_ALLOWED);
            parse_1.validate(tx.totalCollateral === null, invalidDataReason_1.InvalidDataReason.SIGN_MODE_ORDINARY__TOTAL_COLLATERAL_NOT_ALLOWED);
            parse_1.validate(tx.referenceInputs.length === 0, invalidDataReason_1.InvalidDataReason.SIGN_MODE_ORDINARY__REFERENCE_INPUTS_NOT_ALLOWED);
            break;
        }
        case public_1.TransactionSigningMode.MULTISIG_TRANSACTION: {
            parse_1.validate(tx.outputs.every(output => output.destination.type === public_1.TxOutputDestinationType.THIRD_PARTY), invalidDataReason_1.InvalidDataReason.SIGN_MODE_MULTISIG__DEVICE_OWNED_ADDRESS_NOT_ALLOWED);
            parse_1.validate(tx.certificates.every(certificate => certificate.type !== internal_1.CertificateType.STAKE_POOL_REGISTRATION), invalidDataReason_1.InvalidDataReason.SIGN_MODE_MULTISIG__POOL_REGISTRATION_NOT_ALLOWED);
            parse_1.validate(tx.certificates.every(certificate => certificate.type !== internal_1.CertificateType.STAKE_POOL_RETIREMENT), invalidDataReason_1.InvalidDataReason.SIGN_MODE_MULTISIG__POOL_RETIREMENT_NOT_ALLOWED);
            parse_1.validate(tx.certificates.every(certificate => {
                switch (certificate.type) {
                    case internal_1.CertificateType.STAKE_REGISTRATION:
                    case internal_1.CertificateType.STAKE_DEREGISTRATION:
                    case internal_1.CertificateType.STAKE_DELEGATION:
                        return certificate.stakeCredential.type === 1;
                    default:
                        return true;
                }
            }), invalidDataReason_1.InvalidDataReason.SIGN_MODE_MULTISIG__CERTIFICATE_STAKE_CREDENTIAL_ONLY_AS_SCRIPT);
            parse_1.validate(tx.withdrawals.every(withdrawal => withdrawal.stakeCredential.type === 1), invalidDataReason_1.InvalidDataReason.SIGN_MODE_MULTISIG__WITHDRAWAL_ONLY_AS_SCRIPT);
            parse_1.validate(tx.collateralInputs.length === 0, invalidDataReason_1.InvalidDataReason.SIGN_MODE_MULTISIG__COLLATERAL_INPUTS_NOT_ALLOWED);
            parse_1.validate(tx.collateralOutput === null, invalidDataReason_1.InvalidDataReason.SIGN_MODE_MULTISIG__COLLATERAL_OUTPUT_NOT_ALLOWED);
            parse_1.validate(tx.totalCollateral === null, invalidDataReason_1.InvalidDataReason.SIGN_MODE_MULTISIG__TOTAL_COLLATERAL_NOT_ALLOWED);
            parse_1.validate(tx.referenceInputs.length === 0, invalidDataReason_1.InvalidDataReason.SIGN_MODE_MULTISIG__REFERENCE_INPUTS_NOT_ALLOWED);
            break;
        }
        case public_1.TransactionSigningMode.POOL_REGISTRATION_AS_OWNER: {
            parse_1.validate(tx.inputs.every(inp => inp.path == null), invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__INPUT_WITH_PATH_NOT_ALLOWED);
            parse_1.validate(tx.outputs.every(out => out.destination.type === public_1.TxOutputDestinationType.THIRD_PARTY), invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__DEVICE_OWNED_ADDRESS_NOT_ALLOWED);
            parse_1.validate(tx.outputs.every(out => (out.datum == null)), invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__DATUM_NOT_ALLOWED);
            parse_1.validate(tx.outputs.every(out => (out.referenceScriptHex == null)), invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__REFERENCE_SCRIPT_NOT_ALLOWED);
            parse_1.validate(tx.certificates.length === 1, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__SINGLE_POOL_REG_CERTIFICATE_REQUIRED);
            tx.certificates.forEach(certificate => {
                parse_1.validate(certificate.type === internal_1.CertificateType.STAKE_POOL_REGISTRATION, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__SINGLE_POOL_REG_CERTIFICATE_REQUIRED);
                parse_1.validate(certificate.pool.poolKey.type === public_1.PoolKeyType.THIRD_PARTY, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__THIRD_PARTY_POOL_KEY_REQUIRED);
                parse_1.validate(certificate.pool.owners.filter(o => o.type === public_1.PoolOwnerType.DEVICE_OWNED).length === 1, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__SINGLE_DEVICE_OWNER_REQUIRED);
            });
            parse_1.validate(tx.withdrawals.length === 0, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__WITHDRAWALS_NOT_ALLOWED);
            parse_1.validate(tx.mint == null, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__MINT_NOT_ALLOWED);
            parse_1.validate(tx.scriptDataHashHex == null, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__SCRIPT_DATA_HASH_NOT_ALLOWED);
            parse_1.validate(tx.collateralInputs.length === 0, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__COLLATERAL_INPUTS_NOT_ALLOWED);
            parse_1.validate(tx.requiredSigners.length === 0, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__REQUIRED_SIGNERS_NOT_ALLOWED);
            parse_1.validate(tx.collateralOutput === null, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__COLLATERAL_OUTPUT_NOT_ALLOWED);
            parse_1.validate(tx.totalCollateral === null, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__TOTAL_COLLATERAL_NOT_ALLOWED);
            parse_1.validate(tx.referenceInputs.length === 0, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OWNER__REFERENCE_INPUTS_NOT_ALLOWED);
            break;
        }
        case public_1.TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR: {
            parse_1.validate(tx.outputs.every(out => (out.datum == null)), invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OPERATOR__DATUM_NOT_ALLOWED);
            parse_1.validate(tx.outputs.every(out => (out.referenceScriptHex == null)), invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OPERATOR__REFERENCE_SCRIPT_NOT_ALLOWED);
            parse_1.validate(tx.certificates.length === 1, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OPERATOR__SINGLE_POOL_REG_CERTIFICATE_REQUIRED);
            tx.certificates.forEach(certificate => {
                parse_1.validate(certificate.type === internal_1.CertificateType.STAKE_POOL_REGISTRATION, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OPERATOR__SINGLE_POOL_REG_CERTIFICATE_REQUIRED);
                parse_1.validate(certificate.pool.poolKey.type === public_1.PoolKeyType.DEVICE_OWNED, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OPERATOR__DEVICE_OWNED_POOL_KEY_REQUIRED);
                parse_1.validate(certificate.pool.owners.filter(o => o.type === public_1.PoolOwnerType.DEVICE_OWNED).length === 0, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OPERATOR__DEVICE_OWNED_POOL_OWNER_NOT_ALLOWED);
            });
            parse_1.validate(tx.withdrawals.length === 0, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OPERATOR__WITHDRAWALS_NOT_ALLOWED);
            parse_1.validate(tx.mint == null, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OPERATOR__MINT_NOT_ALLOWED);
            parse_1.validate(tx.scriptDataHashHex == null, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OPERATOR__SCRIPT_DATA_HASH_NOT_ALLOWED);
            parse_1.validate(tx.collateralInputs.length === 0, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OPERATOR__COLLATERAL_INPUTS_NOT_ALLOWED);
            parse_1.validate(tx.requiredSigners.length === 0, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OPERATOR__REQUIRED_SIGNERS_NOT_ALLOWED);
            parse_1.validate(tx.collateralOutput === null, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OPERATOR__COLLATERAL_OUTPUT_NOT_ALLOWED);
            parse_1.validate(tx.totalCollateral === null, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OPERATOR__TOTAL_COLLATERAL_NOT_ALLOWED);
            parse_1.validate(tx.referenceInputs.length === 0, invalidDataReason_1.InvalidDataReason.SIGN_MODE_POOL_OPERATOR__REFERENCE_INPUTS_NOT_ALLOWED);
            break;
        }
        case public_1.TransactionSigningMode.PLUTUS_TRANSACTION: {
            parse_1.validate(tx.certificates.every(certificate => certificate.type !== internal_1.CertificateType.STAKE_POOL_REGISTRATION), invalidDataReason_1.InvalidDataReason.SIGN_MODE_PLUTUS__POOL_REGISTRATION_NOT_ALLOWED);
            break;
        }
        default:
            assert_1.unreachable(signingMode);
    }
    return { tx, signingMode, additionalWitnessPaths: additionalWitnessPaths };
}
exports.parseSignTransactionRequest = parseSignTransactionRequest;
//# sourceMappingURL=data:application/json;base64,