"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePoolParams = void 0;
const errors_1 = require("../errors");
const invalidDataReason_1 = require("../errors/invalidDataReason");
const internal_1 = require("../types/internal");
const internal_2 = require("../types/internal");
const public_1 = require("../types/public");
const parse_1 = require("../utils/parse");
const serialize_1 = require("../utils/serialize");
const constants_1 = require("./constants");
function parseMargin(params) {
    const POOL_MARGIN_DENOMINATOR_MAX_STR = "1 000 000 000 000 000 000".replace(/[ ]/, "");
    const marginDenominator = parse_1.parseUint64_str(params.denominator, { max: POOL_MARGIN_DENOMINATOR_MAX_STR }, invalidDataReason_1.InvalidDataReason.POOL_REGISTRATION_INVALID_MARGIN_DENOMINATOR);
    const marginNumerator = parse_1.parseUint64_str(params.numerator, { max: marginDenominator }, invalidDataReason_1.InvalidDataReason.POOL_REGISTRATION_INVALID_MARGIN);
    return {
        numerator: marginNumerator,
        denominator: marginDenominator,
    };
}
function parsePoolParams(params) {
    const poolKey = parsePoolKey(params.poolKey);
    const vrfHashHex = parse_1.parseHexStringOfLength(params.vrfKeyHashHex, internal_2.VRF_KEY_HASH_LENGTH, invalidDataReason_1.InvalidDataReason.POOL_REGISTRATION_INVALID_VRF_KEY_HASH);
    const pledge = parse_1.parseUint64_str(params.pledge, { max: constants_1.MAX_LOVELACE_SUPPLY_STR }, invalidDataReason_1.InvalidDataReason.POOL_REGISTRATION_INVALID_PLEDGE);
    const cost = parse_1.parseUint64_str(params.cost, { max: constants_1.MAX_LOVELACE_SUPPLY_STR }, invalidDataReason_1.InvalidDataReason.POOL_REGISTRATION_INVALID_COST);
    const margin = parseMargin(params.margin);
    const rewardAccount = parseRewardAccount(params.rewardAccount);
    const owners = params.poolOwners.map(owner => parsePoolOwnerParams(owner));
    const relays = params.relays.map(relay => parsePoolRelayParams(relay));
    const metadata = params.metadata == null ? null : parsePoolMetadataParams(params.metadata);
    parse_1.validate(owners.length <= constants_1.POOL_REGISTRATION_OWNERS_MAX, invalidDataReason_1.InvalidDataReason.POOL_REGISTRATION_OWNERS_TOO_MANY);
    parse_1.validate(relays.length <= constants_1.POOL_REGISTRATION_RELAYS_MAX, invalidDataReason_1.InvalidDataReason.POOL_REGISTRATION_RELAYS_TOO_MANY);
    return {
        poolKey,
        vrfHashHex,
        pledge,
        cost,
        margin,
        rewardAccount,
        owners,
        relays,
        metadata,
    };
}
exports.parsePoolParams = parsePoolParams;
function parsePoolKey(poolKey) {
    switch (poolKey.type) {
        case public_1.PoolKeyType.DEVICE_OWNED: {
            const params = poolKey.params;
            const path = parse_1.parseBIP32Path(params.path, invalidDataReason_1.InvalidDataReason.POOL_KEY_INVALID_PATH);
            return {
                type: public_1.PoolKeyType.DEVICE_OWNED,
                path,
            };
        }
        case public_1.PoolKeyType.THIRD_PARTY: {
            const params = poolKey.params;
            const hashHex = parse_1.parseHexStringOfLength(params.keyHashHex, internal_2.KEY_HASH_LENGTH, invalidDataReason_1.InvalidDataReason.POOL_KEY_INVALID_KEY_HASH);
            return {
                type: public_1.PoolKeyType.THIRD_PARTY,
                hashHex,
            };
        }
        default:
            throw new errors_1.InvalidData(invalidDataReason_1.InvalidDataReason.POOL_KEY_INVALID_TYPE);
    }
}
function parsePoolOwnerParams(poolOwner) {
    switch (poolOwner.type) {
        case public_1.PoolOwnerType.DEVICE_OWNED: {
            const params = poolOwner.params;
            const path = parse_1.parseBIP32Path(params.stakingPath, invalidDataReason_1.InvalidDataReason.POOL_OWNER_INVALID_PATH);
            return {
                type: public_1.PoolOwnerType.DEVICE_OWNED,
                path,
            };
        }
        case public_1.PoolOwnerType.THIRD_PARTY: {
            const params = poolOwner.params;
            const hashHex = parse_1.parseHexStringOfLength(params.stakingKeyHashHex, internal_2.KEY_HASH_LENGTH, invalidDataReason_1.InvalidDataReason.POOL_OWNER_INVALID_KEY_HASH);
            return {
                type: public_1.PoolOwnerType.THIRD_PARTY,
                hashHex,
            };
        }
        default:
            throw new errors_1.InvalidData(invalidDataReason_1.InvalidDataReason.POOL_OWNER_INVALID_TYPE);
    }
}
function parseRewardAccount(poolRewardAccount) {
    switch (poolRewardAccount.type) {
        case public_1.PoolRewardAccountType.DEVICE_OWNED: {
            const params = poolRewardAccount.params;
            const path = parse_1.parseBIP32Path(params.path, invalidDataReason_1.InvalidDataReason.POOL_REWARD_ACCOUNT_INVALID_PATH);
            return {
                type: public_1.PoolRewardAccountType.DEVICE_OWNED,
                path,
            };
        }
        case public_1.PoolRewardAccountType.THIRD_PARTY: {
            const params = poolRewardAccount.params;
            const rewardAccountHex = parse_1.parseHexStringOfLength(params.rewardAccountHex, internal_2.REWARD_ACCOUNT_HEX_LENGTH, invalidDataReason_1.InvalidDataReason.POOL_REWARD_ACCOUNT_INVALID_HEX);
            return {
                type: public_1.PoolRewardAccountType.THIRD_PARTY,
                rewardAccountHex,
            };
        }
        default:
            throw new errors_1.InvalidData(invalidDataReason_1.InvalidDataReason.POOL_REWARD_ACCOUNT_INVALID_TYPE);
    }
}
function parsePort(portNumber, errMsg) {
    parse_1.validate(parse_1.isUint16(portNumber), errMsg);
    return portNumber;
}
function parseIPv4(ipv4, errMsg) {
    parse_1.validate(parse_1.isString(ipv4), errMsg);
    const ipParts = ipv4.split(".");
    parse_1.validate(ipParts.length === 4, errMsg);
    const ipBytes = Buffer.alloc(4);
    for (let i = 0; i < 4; i++) {
        const ipPart = parse_1.parseIntFromStr(ipParts[i], invalidDataReason_1.InvalidDataReason.RELAY_INVALID_IPV4);
        parse_1.validate(parse_1.isUint8(ipPart), errMsg);
        ipBytes.writeUInt8(ipPart, i);
    }
    return ipBytes;
}
function parseIPv6(ipv6, errMsg) {
    parse_1.validate(parse_1.isString(ipv6), errMsg);
    const ipHex = ipv6.split(":").join("");
    parse_1.validate(parse_1.isHexStringOfLength(ipHex, 16), errMsg);
    return serialize_1.hex_to_buf(ipHex);
}
function parseDnsName(dnsName, errMsg) {
    parse_1.validate(parse_1.isString(dnsName), errMsg);
    parse_1.validate(dnsName.length <= 64, errMsg);
    parse_1.validate(dnsName.length > 0, errMsg);
    parse_1.validate(/^[\x00-\x7F]*$/.test(dnsName), errMsg);
    parse_1.validate(dnsName
        .split("")
        .every((c) => c.charCodeAt(0) >= 32 && c.charCodeAt(0) <= 126), errMsg);
    return dnsName;
}
function parsePoolRelayParams(relayParams) {
    switch (relayParams.type) {
        case 0: {
            const params = relayParams.params;
            return {
                type: 0,
                port: ('portNumber' in params && params.portNumber != null)
                    ? parsePort(params.portNumber, invalidDataReason_1.InvalidDataReason.RELAY_INVALID_PORT)
                    : null,
                ipv4: ('ipv4' in params && params.ipv4 != null)
                    ? parseIPv4(params.ipv4, invalidDataReason_1.InvalidDataReason.RELAY_INVALID_IPV4)
                    : null,
                ipv6: ('ipv6' in params && params.ipv6 != null)
                    ? parseIPv6(params.ipv6, invalidDataReason_1.InvalidDataReason.RELAY_INVALID_IPV6)
                    : null,
            };
        }
        case 1: {
            const params = relayParams.params;
            return {
                type: 1,
                port: ('portNumber' in params && params.portNumber != null)
                    ? parsePort(params.portNumber, invalidDataReason_1.InvalidDataReason.RELAY_INVALID_PORT)
                    : null,
                dnsName: parseDnsName(params.dnsName, invalidDataReason_1.InvalidDataReason.RELAY_INVALID_DNS),
            };
        }
        case 2: {
            const params = relayParams.params;
            return {
                type: 2,
                dnsName: parseDnsName(params.dnsName, invalidDataReason_1.InvalidDataReason.RELAY_INVALID_DNS),
            };
        }
        default:
            throw new errors_1.InvalidData(invalidDataReason_1.InvalidDataReason.RELAY_INVALID_TYPE);
    }
}
function parsePoolMetadataParams(params) {
    const url = parse_1.parseAscii(params.metadataUrl, invalidDataReason_1.InvalidDataReason.POOL_REGISTRATION_METADATA_INVALID_URL);
    parse_1.validate(url.length <= 64, invalidDataReason_1.InvalidDataReason.POOL_REGISTRATION_METADATA_INVALID_URL);
    const hashHex = parse_1.parseHexStringOfLength(params.metadataHashHex, internal_1.AUXILIARY_DATA_HASH_LENGTH, invalidDataReason_1.InvalidDataReason.POOL_REGISTRATION_METADATA_INVALID_HASH);
    return {
        url,
        hashHex,
        __brand: 'pool_metadata',
    };
}
//# sourceMappingURL=data:application/json;base64,