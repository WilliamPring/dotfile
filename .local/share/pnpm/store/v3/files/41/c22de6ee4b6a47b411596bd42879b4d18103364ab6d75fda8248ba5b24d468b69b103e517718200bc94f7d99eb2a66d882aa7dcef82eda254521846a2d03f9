"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.msgBurnNFT = void 0;
var ow_1 = __importDefault(require("ow"));
var ow_types_1 = require("../ow.types");
var address_1 = require("../../../utils/address");
var typeurl_1 = require("../../common/constants/typeurl");
exports.msgBurnNFT = function (config) {
    return (function () {
        function MsgBurnNFT(options) {
            ow_1.default(options, 'options', ow_types_1.owMsgBurnNFTOptions);
            this.id = options.id;
            this.denomId = options.denomId;
            this.sender = options.sender;
            this.validateAddress();
        }
        MsgBurnNFT.prototype.toRawMsg = function () {
            return {
                typeUrl: typeurl_1.COSMOS_MSG_TYPEURL.nft.MsgBurnNFT,
                value: {
                    id: this.id,
                    denomId: this.denomId,
                    sender: this.sender,
                },
            };
        };
        MsgBurnNFT.prototype.toRawAminoMsg = function () {
            throw new Error('Amino encoding format not support for NFT module.');
        };
        MsgBurnNFT.prototype.validateAddress = function () {
            if (!address_1.validateAddress({
                address: this.sender,
                network: config.network,
                type: address_1.AddressType.USER,
            })) {
                throw new TypeError('Provided `sender` does not match network selected');
            }
        };
        return MsgBurnNFT;
    }());
};
//# sourceMappingURL=MsgBurnNFT.js.map