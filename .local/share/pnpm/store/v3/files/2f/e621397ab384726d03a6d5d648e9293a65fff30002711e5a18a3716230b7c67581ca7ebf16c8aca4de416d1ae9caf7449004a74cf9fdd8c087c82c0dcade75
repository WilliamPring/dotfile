"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseIntFromStr = exports.parseStakeCredential = exports.parseBIP32Path = exports.parseUint8_t = exports.parseUint16_t = exports.parseUint32_t = exports.parseUint64_str = exports.parseInt64_str = exports.parseHexStringOfLength = exports.parseHexString = exports.parseAscii = exports.validate = exports.isIntStr = exports.isInt64Bigint = exports.isInt64Number = exports.isInt64str = exports.isUintStr = exports.isUint64Bigint = exports.isUint64Number = exports.isUint64str = exports.isValidPath = exports.isHexStringOfLength = exports.isHexString = exports.isUint8 = exports.isUint16 = exports.isUint32 = exports.isBuffer = exports.isArray = exports.isInteger = exports.isString = exports.MAX_INT_64_STR = exports.MIN_INT_64_STR = exports.MAX_UINT_64_STR = void 0;
const errors_1 = require("../errors");
const internal_1 = require("../types/internal");
const public_1 = require("../types/public");
exports.MAX_UINT_64_STR = "18446744073709551615";
exports.MIN_INT_64_STR = "-9223372036854775808";
exports.MAX_INT_64_STR = "9223372036854775807";
const isString = (data) => typeof data === "string";
exports.isString = isString;
const isInteger = (data) => Number.isInteger(data);
exports.isInteger = isInteger;
const isArray = (data) => Array.isArray(data);
exports.isArray = isArray;
const isBuffer = (data) => Buffer.isBuffer(data);
exports.isBuffer = isBuffer;
const isUint32 = (data) => exports.isInteger(data) && data >= 0 && data <= 4294967295;
exports.isUint32 = isUint32;
const isUint16 = (data) => exports.isInteger(data) && data >= 0 && data <= 65535;
exports.isUint16 = isUint16;
const isUint8 = (data) => exports.isInteger(data) && data >= 0 && data <= 255;
exports.isUint8 = isUint8;
const isHexString = (data) => exports.isString(data) && data.length % 2 === 0 && /^[0-9a-fA-F]*$/.test(data);
exports.isHexString = isHexString;
const isHexStringOfLength = (data, expectedByteLength) => exports.isHexString(data) && data.length === expectedByteLength * 2;
exports.isHexStringOfLength = isHexStringOfLength;
const isValidPath = (data) => exports.isArray(data) && data.every(x => exports.isUint32(x)) && data.length <= 5;
exports.isValidPath = isValidPath;
const isUint64str = (data) => exports.isUintStr(data, {});
exports.isUint64str = isUint64str;
const isUint64Number = (data) => exports.isInteger(data) && data >= 0 && data <= Number.MAX_SAFE_INTEGER;
exports.isUint64Number = isUint64Number;
const isUint64Bigint = (data) => (typeof data === 'bigint') && exports.isUint64str(data.toString());
exports.isUint64Bigint = isUint64Bigint;
const isUintStr = (data, constraints) => {
    var _a, _b;
    const min = (_a = constraints.min) !== null && _a !== void 0 ? _a : "0";
    const max = (_b = constraints.max) !== null && _b !== void 0 ? _b : exports.MAX_UINT_64_STR;
    return exports.isString(data)
        && /^[0-9]*$/.test(data)
        && data.length > 0
        && data.length <= max.length
        && (data.length === 1 || data[0] !== "0")
        && (data.length < max.length ||
            data <= max) && (data.length > min.length ||
        data >= min);
};
exports.isUintStr = isUintStr;
const isInt64str = (data) => exports.isIntStr(data, {});
exports.isInt64str = isInt64str;
const isInt64Number = (data) => exports.isInteger(data) && data >= Number.MIN_SAFE_INTEGER && data <= Number.MAX_SAFE_INTEGER;
exports.isInt64Number = isInt64Number;
const isInt64Bigint = (data) => (typeof data === 'bigint') && exports.isInt64str(data.toString());
exports.isInt64Bigint = isInt64Bigint;
const isIntStr = (data, constraints) => {
    var _a, _b;
    const min = (_a = constraints.min) !== null && _a !== void 0 ? _a : exports.MIN_INT_64_STR;
    const max = (_b = constraints.max) !== null && _b !== void 0 ? _b : exports.MAX_INT_64_STR;
    let hasValidFormat = exports.isString(data)
        && /^-?[0-9]*$/.test(data)
        && data.length > 0;
    let isValidNegativeNumber = exports.isString(data) && data.startsWith("-") &&
        (data.length === 2 || data[1] !== "0") &&
        (data.length < min.length || data <= min);
    let isValidPositiveNumber = exports.isString(data) && !data.startsWith("-") &&
        (data.length === 1 || data[0] !== "0") &&
        (data.length < max.length || data <= max);
    return hasValidFormat && (isValidNegativeNumber || isValidPositiveNumber);
};
exports.isIntStr = isIntStr;
function validate(cond, errMsg) {
    if (!cond)
        throw new errors_1.InvalidData(errMsg);
}
exports.validate = validate;
function parseAscii(str, errMsg) {
    validate(exports.isString(str), errMsg);
    validate(str.split("").every((c) => c.charCodeAt(0) >= 32 && c.charCodeAt(0) <= 126), errMsg);
    return str;
}
exports.parseAscii = parseAscii;
function parseHexString(str, errMsg) {
    validate(exports.isHexString(str), errMsg);
    return str;
}
exports.parseHexString = parseHexString;
function parseHexStringOfLength(str, length, errMsg) {
    validate(exports.isHexStringOfLength(str, length), errMsg);
    return str;
}
exports.parseHexStringOfLength = parseHexStringOfLength;
function parseInt64_str(val, constraints, errMsg) {
    switch (typeof val) {
        case 'string':
            validate(exports.isInt64str(val) && exports.isIntStr(val, constraints), errMsg);
            return val;
        case 'number':
            validate(exports.isInt64Number(val) && exports.isIntStr(val.toString(), constraints), errMsg);
            return val.toString();
        case 'bigint':
            validate(exports.isInt64Bigint(val) && exports.isIntStr(val.toString(), constraints), errMsg);
            return val.toString();
        default:
            validate(false, errMsg);
    }
}
exports.parseInt64_str = parseInt64_str;
function parseUint64_str(val, constraints, errMsg) {
    switch (typeof val) {
        case 'string':
            validate(exports.isUint64str(val) && exports.isUintStr(val, constraints), errMsg);
            return val;
        case 'number':
            validate(exports.isUint64Number(val) && exports.isUintStr(val.toString(), constraints), errMsg);
            return val.toString();
        case 'bigint':
            validate(exports.isUint64Bigint(val) && exports.isUintStr(val.toString(), constraints), errMsg);
            return val.toString();
        default:
            validate(false, errMsg);
    }
}
exports.parseUint64_str = parseUint64_str;
function parseUint32_t(value, errMsg) {
    validate(exports.isUint32(value), errMsg);
    return value;
}
exports.parseUint32_t = parseUint32_t;
function parseUint16_t(value, errMsg) {
    validate(exports.isUint16(value), errMsg);
    return value;
}
exports.parseUint16_t = parseUint16_t;
function parseUint8_t(value, errMsg) {
    validate(exports.isUint8(value), errMsg);
    return value;
}
exports.parseUint8_t = parseUint8_t;
function parseBIP32Path(value, errMsg) {
    validate(exports.isValidPath(value), errMsg);
    return value;
}
exports.parseBIP32Path = parseBIP32Path;
function parseStakeCredential(stakeCredential, errMsg) {
    switch (stakeCredential.type) {
        case public_1.StakeCredentialParamsType.KEY_PATH:
            return {
                type: 0,
                path: parseBIP32Path(stakeCredential.keyPath, errMsg),
            };
        case public_1.StakeCredentialParamsType.KEY_HASH:
            return {
                type: 2,
                keyHashHex: parseHexStringOfLength(stakeCredential.keyHashHex, internal_1.KEY_HASH_LENGTH, errMsg),
            };
        case public_1.StakeCredentialParamsType.SCRIPT_HASH:
            return {
                type: 1,
                scriptHashHex: parseHexStringOfLength(stakeCredential.scriptHashHex, internal_1.SCRIPT_HASH_LENGTH, errMsg),
            };
    }
}
exports.parseStakeCredential = parseStakeCredential;
function parseIntFromStr(str, errMsg) {
    validate(exports.isString(str), errMsg);
    const i = parseInt(str);
    validate("" + i === str, errMsg);
    validate(!isNaN(i), errMsg);
    validate(exports.isInteger(i), errMsg);
    return i;
}
exports.parseIntFromStr = parseIntFromStr;
//# sourceMappingURL=data:application/json;base64,