"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializePoolMetadata = exports.serializePoolRelay = exports.serializePoolRewardAccountLegacy = exports.serializePoolRewardAccount = exports.serializePoolOwner = exports.serializePoolKeyLegacy = exports.serializePoolKey = exports.serializeFinancials = exports.serializePoolInitialParamsLegacy = exports.serializePoolInitialParams = void 0;
const internal_1 = require("../../types/internal");
const assert_1 = require("../../utils/assert");
const serialize_1 = require("../../utils/serialize");
const SignTxIncluded = Object.freeze({
    SIGN_TX_INCLUDED_NO: 1,
    SIGN_TX_INCLUDED_YES: 2,
});
function serializePoolInitialParams(pool) {
    return Buffer.concat([
        serialize_1.uint32_to_buf(pool.owners.length),
        serialize_1.uint32_to_buf(pool.relays.length),
    ]);
}
exports.serializePoolInitialParams = serializePoolInitialParams;
function serializePoolInitialParamsLegacy(pool) {
    return Buffer.concat([
        serializePoolKeyLegacy(pool.poolKey),
        serialize_1.hex_to_buf(pool.vrfHashHex),
        serialize_1.uint64_to_buf(pool.pledge),
        serialize_1.uint64_to_buf(pool.cost),
        serialize_1.uint64_to_buf(pool.margin.numerator),
        serialize_1.uint64_to_buf(pool.margin.denominator),
        serializePoolRewardAccountLegacy(pool.rewardAccount),
        serialize_1.uint32_to_buf(pool.owners.length),
        serialize_1.uint32_to_buf(pool.relays.length),
    ]);
}
exports.serializePoolInitialParamsLegacy = serializePoolInitialParamsLegacy;
function serializeFinancials(pool) {
    return Buffer.concat([
        serialize_1.uint64_to_buf(pool.pledge),
        serialize_1.uint64_to_buf(pool.cost),
        serialize_1.uint64_to_buf(pool.margin.numerator),
        serialize_1.uint64_to_buf(pool.margin.denominator),
    ]);
}
exports.serializeFinancials = serializeFinancials;
function serializePoolKey(key) {
    const typeHeader = {
        [internal_1.PoolKeyType.DEVICE_OWNED]: 1,
        [internal_1.PoolKeyType.THIRD_PARTY]: 2,
    };
    switch (key.type) {
        case internal_1.PoolKeyType.DEVICE_OWNED: {
            return Buffer.concat([
                serialize_1.uint8_to_buf(typeHeader[key.type]),
                serialize_1.path_to_buf(key.path),
            ]);
        }
        case internal_1.PoolKeyType.THIRD_PARTY: {
            return Buffer.concat([
                serialize_1.uint8_to_buf(typeHeader[key.type]),
                serialize_1.hex_to_buf(key.hashHex),
            ]);
        }
        default:
            assert_1.unreachable(key);
    }
}
exports.serializePoolKey = serializePoolKey;
function serializePoolKeyLegacy(key) {
    assert_1.assert(key.type === internal_1.PoolKeyType.THIRD_PARTY, 'invalid pool key type for legacy Ledger version');
    return serialize_1.hex_to_buf(key.hashHex);
}
exports.serializePoolKeyLegacy = serializePoolKeyLegacy;
function serializePoolOwner(owner) {
    const typeHeader = {
        [internal_1.PoolOwnerType.DEVICE_OWNED]: 1,
        [internal_1.PoolOwnerType.THIRD_PARTY]: 2,
    };
    switch (owner.type) {
        case internal_1.PoolOwnerType.DEVICE_OWNED: {
            return Buffer.concat([
                serialize_1.uint8_to_buf(typeHeader[owner.type]),
                serialize_1.path_to_buf(owner.path),
            ]);
        }
        case internal_1.PoolOwnerType.THIRD_PARTY: {
            return Buffer.concat([
                serialize_1.uint8_to_buf(typeHeader[owner.type]),
                serialize_1.hex_to_buf(owner.hashHex),
            ]);
        }
        default:
            assert_1.unreachable(owner);
    }
}
exports.serializePoolOwner = serializePoolOwner;
function serializePoolRewardAccount(rewardAccount) {
    const typeHeader = {
        [internal_1.PoolRewardAccountType.DEVICE_OWNED]: 1,
        [internal_1.PoolRewardAccountType.THIRD_PARTY]: 2,
    };
    switch (rewardAccount.type) {
        case internal_1.PoolRewardAccountType.DEVICE_OWNED: {
            return Buffer.concat([
                serialize_1.uint8_to_buf(typeHeader[rewardAccount.type]),
                serialize_1.path_to_buf(rewardAccount.path),
            ]);
        }
        case internal_1.PoolRewardAccountType.THIRD_PARTY: {
            return Buffer.concat([
                serialize_1.uint8_to_buf(typeHeader[rewardAccount.type]),
                serialize_1.hex_to_buf(rewardAccount.rewardAccountHex),
            ]);
        }
        default:
            assert_1.unreachable(rewardAccount);
    }
}
exports.serializePoolRewardAccount = serializePoolRewardAccount;
function serializePoolRewardAccountLegacy(rewardAccount) {
    assert_1.assert(rewardAccount.type === internal_1.PoolRewardAccountType.THIRD_PARTY, 'invalid pool reward account type for legacy Ledger version');
    return serialize_1.hex_to_buf(rewardAccount.rewardAccountHex);
}
exports.serializePoolRewardAccountLegacy = serializePoolRewardAccountLegacy;
function serializePoolRelay(relay) {
    function serializeOptional(x, cb) {
        if (x == null) {
            return Buffer.concat([
                serialize_1.uint8_to_buf(1),
            ]);
        }
        else {
            return Buffer.concat([
                serialize_1.uint8_to_buf(2),
                cb(x),
            ]);
        }
    }
    switch (relay.type) {
        case 0: {
            return Buffer.concat([
                serialize_1.uint8_to_buf(relay.type),
                serializeOptional(relay.port, port => serialize_1.uint16_to_buf(port)),
                serializeOptional(relay.ipv4, ipv4 => ipv4),
                serializeOptional(relay.ipv6, ipv6 => ipv6),
            ]);
        }
        case 1: {
            return Buffer.concat([
                serialize_1.uint8_to_buf(relay.type),
                serializeOptional(relay.port, port => serialize_1.uint16_to_buf(port)),
                Buffer.from(relay.dnsName, "ascii"),
            ]);
        }
        case 2: {
            return Buffer.concat([
                serialize_1.uint8_to_buf(relay.type),
                Buffer.from(relay.dnsName, "ascii"),
            ]);
        }
        default:
            assert_1.unreachable(relay);
    }
}
exports.serializePoolRelay = serializePoolRelay;
function serializePoolMetadata(metadata) {
    if (metadata == null) {
        return Buffer.concat([
            serialize_1.uint8_to_buf(SignTxIncluded.SIGN_TX_INCLUDED_NO),
        ]);
    }
    else {
        return Buffer.concat([
            serialize_1.uint8_to_buf(SignTxIncluded.SIGN_TX_INCLUDED_YES),
            serialize_1.hex_to_buf(metadata.hashHex),
            Buffer.from(metadata.url, 'ascii'),
        ]);
    }
}
exports.serializePoolMetadata = serializePoolMetadata;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9vbFJlZ2lzdHJhdGlvbkNlcnRpZmljYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2ludGVyYWN0aW9ucy9zZXJpYWxpemF0aW9uL3Bvb2xSZWdpc3RyYXRpb25DZXJ0aWZpY2F0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtREFBbUc7QUFDbkcsK0NBQXdEO0FBQ3hELHFEQUEwSDtBQUcxSCxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2pDLG1CQUFtQixFQUFFLENBQUM7SUFDdEIsb0JBQW9CLEVBQUUsQ0FBQztDQUMxQixDQUFDLENBQUE7QUFHRixTQUFnQiwwQkFBMEIsQ0FBQyxJQUFzQjtJQUM3RCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDakIseUJBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQWtCLENBQUM7UUFDN0MseUJBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQWtCLENBQUM7S0FDaEQsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQUxELGdFQUtDO0FBRUQsU0FBZ0IsZ0NBQWdDLENBQUMsSUFBc0I7SUFDbkUsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2pCLHNCQUFzQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDcEMsc0JBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzNCLHlCQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMxQix5QkFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDeEIseUJBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUNwQyx5QkFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ3RDLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDcEQseUJBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQWtCLENB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